{"ast":null,"code":"var _jsxFileName = \"/Users/franklinbarto/Workspace/React/bbox-finder/src/App.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$(),\n  _s3 = $RefreshSig$();\n// src/App.js\nimport React, { useState, useRef, useEffect } from 'react';\nimport { MapContainer, TileLayer, FeatureGroup, Marker, Popup, useMapEvents } from 'react-leaflet';\nimport { EditControl } from 'react-leaflet-draw';\nimport axios from 'axios';\nimport L from 'leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport 'leaflet-draw/dist/leaflet.draw.css';\nimport './App.css';\n\n// Custom marker icon to fix the missing icon issue\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\ndelete L.Icon.Default.prototype._getIconUrl;\nL.Icon.Default.mergeOptions({\n  iconRetinaUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-icon-2x.png',\n  iconUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-icon.png',\n  shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-shadow.png'\n});\n\n// Component to track mouse position\nconst MousePositionTracker = ({\n  onPositionChange\n}) => {\n  _s();\n  useMapEvents({\n    mousemove: e => {\n      const {\n        lat,\n        lng\n      } = e.latlng;\n      onPositionChange({\n        lat: lat.toFixed(6),\n        lng: lng.toFixed(6)\n      });\n    }\n  });\n  return null;\n};\n\n// Component for placing markers on click\n_s(MousePositionTracker, \"Ld/tk8Iz8AdZhC1l7acENaOEoCo=\", false, function () {\n  return [useMapEvents];\n});\n_c = MousePositionTracker;\nconst ClickHandler = ({\n  onMarkerPlace\n}) => {\n  _s2();\n  useMapEvents({\n    click: e => {\n      onMarkerPlace(e.latlng);\n    }\n  });\n  return null;\n};\n_s2(ClickHandler, \"Ld/tk8Iz8AdZhC1l7acENaOEoCo=\", false, function () {\n  return [useMapEvents];\n});\n_c2 = ClickHandler;\nconst App = () => {\n  _s3();\n  const [measurements, setMeasurements] = useState({\n    area: 0,\n    perimeter: 0\n  });\n  const [polygons, setPolygons] = useState([]);\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [errorMessage, setErrorMessage] = useState('');\n  const [markers, setMarkers] = useState([]);\n  const [mousePosition, setMousePosition] = useState({\n    lat: '0.000000',\n    lng: '0.000000'\n  });\n  const [currentPolygon, setCurrentPolygon] = useState(null);\n  const [isMarkingMode, setIsMarkingMode] = useState(false);\n  const featureGroupRef = useRef();\n  const mapRef = useRef();\n  const handleCreate = e => {\n    const {\n      layerType,\n      layer\n    } = e;\n    if (layerType === 'polygon') {\n      // Get the coordinates from the created polygon\n      const latLngs = layer.getLatLngs()[0];\n      const coordinates = latLngs.map(latLng => [latLng.lat, latLng.lng]);\n\n      // Calculate area and perimeter\n      const area = calculateArea(coordinates);\n      const perimeter = calculatePerimeter(coordinates);\n      const newPolygon = {\n        id: Date.now(),\n        coordinates,\n        area: area.toFixed(2),\n        perimeter: perimeter.toFixed(2)\n      };\n      setMeasurements({\n        area: area.toFixed(2),\n        perimeter: perimeter.toFixed(2)\n      });\n\n      // Add the polygon to state\n      setPolygons([...polygons, newPolygon]);\n\n      // Set as current polygon\n      setCurrentPolygon(newPolygon);\n    }\n  };\n  const calculateArea = coordinates => {\n    // Basic area calculation (more accurate implementations would use geodesic calculations)\n    // This is a simplified version - real implementation would use a proper geospatial library\n    let area = 0;\n    for (let i = 0; i < coordinates.length; i++) {\n      const j = (i + 1) % coordinates.length;\n      area += coordinates[i][0] * coordinates[j][1];\n      area -= coordinates[j][0] * coordinates[i][1];\n    }\n    return Math.abs(area) * 111000 * 111000 / 2; // rough conversion to square meters\n  };\n  const calculatePerimeter = coordinates => {\n    // Basic perimeter calculation\n    let perimeter = 0;\n    for (let i = 0; i < coordinates.length; i++) {\n      const j = (i + 1) % coordinates.length;\n      const dx = coordinates[i][0] - coordinates[j][0];\n      const dy = coordinates[i][1] - coordinates[j][1];\n      perimeter += Math.sqrt(dx * dx + dy * dy);\n    }\n    return perimeter * 111000; // rough conversion to meters\n  };\n  const handleMarkerPlace = latlng => {\n    if (isMarkingMode) {\n      const newMarker = {\n        id: Date.now(),\n        position: [latlng.lat, latlng.lng],\n        label: `Marker ${markers.length + 1}`\n      };\n      setMarkers([...markers, newMarker]);\n    }\n  };\n  const toggleMarkingMode = () => {\n    setIsMarkingMode(!isMarkingMode);\n  };\n  const removeMarker = markerId => {\n    setMarkers(markers.filter(marker => marker.id !== markerId));\n  };\n  const detectBoundaries = async () => {\n    setIsProcessing(true);\n    setErrorMessage('');\n    try {\n      // Get the current map bounds\n      const mapInstance = mapRef.current;\n      const bounds = mapInstance.getBounds();\n      const center = mapInstance.getCenter();\n      const zoom = mapInstance.getZoom();\n      const response = await axios.post('http://localhost:5000/api/detect-boundaries', {\n        bounds: {\n          north: bounds.getNorth(),\n          south: bounds.getSouth(),\n          east: bounds.getEast(),\n          west: bounds.getWest()\n        },\n        center: {\n          lat: center.lat,\n          lng: center.lng\n        },\n        zoom: zoom\n      });\n\n      // Handle the detected boundaries\n      if (response.data.boundaries && response.data.boundaries.length > 0) {\n        // Clear existing drawn layers\n        featureGroupRef.current.clearLayers();\n\n        // Add the detected boundaries as new polygons\n        const detectedPolygons = [];\n        response.data.boundaries.forEach(boundary => {\n          const coordinates = boundary.coordinates;\n\n          // Create a new polygon and add it to the feature group\n          const polygon = L.polygon(coordinates);\n          featureGroupRef.current.addLayer(polygon);\n\n          // Calculate measurements\n          const area = calculateArea(coordinates);\n          const perimeter = calculatePerimeter(coordinates);\n          const newPolygon = {\n            id: Date.now() + Math.random(),\n            coordinates,\n            area: area.toFixed(2),\n            perimeter: perimeter.toFixed(2)\n          };\n          detectedPolygons.push(newPolygon);\n        });\n        setPolygons([...polygons, ...detectedPolygons]);\n        if (detectedPolygons.length > 0) {\n          setCurrentPolygon(detectedPolygons[0]);\n          setMeasurements({\n            area: detectedPolygons[0].area,\n            perimeter: detectedPolygons[0].perimeter\n          });\n        }\n      } else {\n        setErrorMessage('No boundaries detected in this area');\n      }\n    } catch (error) {\n      console.error('Error detecting boundaries:', error);\n      setErrorMessage('Error detecting boundaries. Please try again.');\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n  const exportData = () => {\n    const exportData = {\n      polygons,\n      markers\n    };\n    const dataStr = JSON.stringify(exportData, null, 2);\n    const dataUri = 'data:application/json;charset=utf-8,' + encodeURIComponent(dataStr);\n    const exportFileDefaultName = 'land-measurements.json';\n    const linkElement = document.createElement('a');\n    linkElement.setAttribute('href', dataUri);\n    linkElement.setAttribute('download', exportFileDefaultName);\n    linkElement.click();\n  };\n  const copyPolygonCoordinates = () => {\n    if (currentPolygon) {\n      // Format coordinates as readable text\n      const formattedCoords = currentPolygon.coordinates.map(coord => `[${coord[0].toFixed(6)}, ${coord[1].toFixed(6)}]`).join(',\\n');\n      navigator.clipboard.writeText(`[\\n${formattedCoords}\\n]`).then(() => {\n        alert('Polygon coordinates copied to clipboard!');\n      }).catch(err => {\n        console.error('Failed to copy coordinates: ', err);\n        // Fallback for browsers that don't support clipboard API\n        const textArea = document.createElement('textarea');\n        textArea.value = `[\\n${formattedCoords}\\n]`;\n        document.body.appendChild(textArea);\n        textArea.select();\n        document.execCommand('copy');\n        document.body.removeChild(textArea);\n        alert('Polygon coordinates copied to clipboard!');\n      });\n    } else {\n      alert('No polygon selected to copy.');\n    }\n  };\n  const handlePolygonSelect = polygon => {\n    setCurrentPolygon(polygon);\n    setMeasurements({\n      area: polygon.area,\n      perimeter: polygon.perimeter\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Land Measurement App\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 268,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 267,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"content\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"map-container\",\n        children: [/*#__PURE__*/_jsxDEV(MapContainer, {\n          center: [40.505, -100.09],\n          zoom: 13,\n          style: {\n            height: '600px',\n            width: '100%'\n          },\n          ref: mapRef,\n          children: [/*#__PURE__*/_jsxDEV(TileLayer, {\n            attribution: \"\\xA9 <a href=\\\"https://www.openstreetmap.org/copyright\\\">OpenStreetMap</a> contributors\",\n            url: \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 279,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(TileLayer, {\n            attribution: \"\\xA9 <a href=\\\"https://www.esri.com\\\">Esri</a>\",\n            url: \"https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 283,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(FeatureGroup, {\n            ref: featureGroupRef,\n            children: /*#__PURE__*/_jsxDEV(EditControl, {\n              position: \"topright\",\n              onCreated: handleCreate,\n              draw: {\n                rectangle: false,\n                circle: false,\n                circlemarker: false,\n                marker: false,\n                // We'll handle markers ourselves\n                polyline: true,\n                polygon: true\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 288,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 287,\n            columnNumber: 13\n          }, this), markers.map(marker => /*#__PURE__*/_jsxDEV(Marker, {\n            position: marker.position,\n            children: /*#__PURE__*/_jsxDEV(Popup, {\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: marker.label\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 310,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 310,\n                  columnNumber: 52\n                }, this), \"Lat: \", marker.position[0].toFixed(6), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 311,\n                  columnNumber: 57\n                }, this), \"Lng: \", marker.position[1].toFixed(6), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 312,\n                  columnNumber: 57\n                }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                  onClick: () => removeMarker(marker.id),\n                  children: \"Remove\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 313,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 309,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 308,\n              columnNumber: 17\n            }, this)\n          }, marker.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 304,\n            columnNumber: 15\n          }, this)), /*#__PURE__*/_jsxDEV(MousePositionTracker, {\n            onPositionChange: setMousePosition\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 320,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(ClickHandler, {\n            onMarkerPlace: handleMarkerPlace\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 323,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 273,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mouse-position\",\n          children: [\"Mouse Position: Lat \", mousePosition.lat, \", Lng \", mousePosition.lng]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 326,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 272,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"controls-panel\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"measurements\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Measurements\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 333,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Area: \", measurements.area, \" m\\xB2\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 334,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Perimeter: \", measurements.perimeter, \" m\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 335,\n            columnNumber: 13\n          }, this), currentPolygon && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"current-polygon\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              children: \"Current Polygon\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 339,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"polygon-coordinates-container\",\n              children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n                className: \"polygon-coordinates\",\n                readOnly: true,\n                value: currentPolygon.coordinates.map(coord => `[${coord[0].toFixed(6)}, ${coord[1].toFixed(6)}]`).join(',\\n')\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 341,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: copyPolygonCoordinates,\n                className: \"copy-button\",\n                children: \"Copy\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 348,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 340,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 338,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 332,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"actions\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: toggleMarkingMode,\n            className: `action-button ${isMarkingMode ? 'active' : ''}`,\n            children: isMarkingMode ? 'Exit Marking Mode' : 'Place Markers'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 357,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: detectBoundaries,\n            disabled: isProcessing,\n            className: \"action-button\",\n            children: isProcessing ? 'Processing...' : 'Detect Boundaries'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 364,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: exportData,\n            disabled: polygons.length === 0 && markers.length === 0,\n            className: \"action-button\",\n            children: \"Export Data\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 372,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 356,\n          columnNumber: 11\n        }, this), errorMessage && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"error-message\",\n          children: errorMessage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 382,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"data-sections\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"markers-section\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              children: \"Placed Markers\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 389,\n              columnNumber: 15\n            }, this), markers.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"No markers placed\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 391,\n              columnNumber: 17\n            }, this) : /*#__PURE__*/_jsxDEV(\"ul\", {\n              children: markers.map(marker => /*#__PURE__*/_jsxDEV(\"li\", {\n                children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: [marker.label, \":\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 396,\n                  columnNumber: 23\n                }, this), \" \", marker.position[0].toFixed(6), \", \", marker.position[1].toFixed(6), /*#__PURE__*/_jsxDEV(\"button\", {\n                  onClick: () => removeMarker(marker.id),\n                  className: \"small-button\",\n                  children: \"\\xD7\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 397,\n                  columnNumber: 23\n                }, this)]\n              }, marker.id, true, {\n                fileName: _jsxFileName,\n                lineNumber: 395,\n                columnNumber: 21\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 393,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 388,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"polygons-section\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              children: \"Saved Measurements\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 410,\n              columnNumber: 15\n            }, this), polygons.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"No measurements saved\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 412,\n              columnNumber: 17\n            }, this) : /*#__PURE__*/_jsxDEV(\"ul\", {\n              children: polygons.map(polygon => /*#__PURE__*/_jsxDEV(\"li\", {\n                className: currentPolygon && currentPolygon.id === polygon.id ? 'selected' : '',\n                onClick: () => handlePolygonSelect(polygon),\n                children: [\"Area: \", polygon.area, \" m\\xB2 | Perimeter: \", polygon.perimeter, \" m\"]\n              }, polygon.id, true, {\n                fileName: _jsxFileName,\n                lineNumber: 416,\n                columnNumber: 21\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 414,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 409,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 387,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 331,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 271,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 266,\n    columnNumber: 5\n  }, this);\n};\n_s3(App, \"D2bT13V0HKUukzJ4AF1X5LXYytI=\");\n_c3 = App;\nexport default App;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"MousePositionTracker\");\n$RefreshReg$(_c2, \"ClickHandler\");\n$RefreshReg$(_c3, \"App\");","map":{"version":3,"names":["React","useState","useRef","useEffect","MapContainer","TileLayer","FeatureGroup","Marker","Popup","useMapEvents","EditControl","axios","L","jsxDEV","_jsxDEV","Icon","Default","prototype","_getIconUrl","mergeOptions","iconRetinaUrl","iconUrl","shadowUrl","MousePositionTracker","onPositionChange","_s","mousemove","e","lat","lng","latlng","toFixed","_c","ClickHandler","onMarkerPlace","_s2","click","_c2","App","_s3","measurements","setMeasurements","area","perimeter","polygons","setPolygons","isProcessing","setIsProcessing","errorMessage","setErrorMessage","markers","setMarkers","mousePosition","setMousePosition","currentPolygon","setCurrentPolygon","isMarkingMode","setIsMarkingMode","featureGroupRef","mapRef","handleCreate","layerType","layer","latLngs","getLatLngs","coordinates","map","latLng","calculateArea","calculatePerimeter","newPolygon","id","Date","now","i","length","j","Math","abs","dx","dy","sqrt","handleMarkerPlace","newMarker","position","label","toggleMarkingMode","removeMarker","markerId","filter","marker","detectBoundaries","mapInstance","current","bounds","getBounds","center","getCenter","zoom","getZoom","response","post","north","getNorth","south","getSouth","east","getEast","west","getWest","data","boundaries","clearLayers","detectedPolygons","forEach","boundary","polygon","addLayer","random","push","error","console","exportData","dataStr","JSON","stringify","dataUri","encodeURIComponent","exportFileDefaultName","linkElement","document","createElement","setAttribute","copyPolygonCoordinates","formattedCoords","coord","join","navigator","clipboard","writeText","then","alert","catch","err","textArea","value","body","appendChild","select","execCommand","removeChild","handlePolygonSelect","className","children","fileName","_jsxFileName","lineNumber","columnNumber","style","height","width","ref","attribution","url","onCreated","draw","rectangle","circle","circlemarker","polyline","onClick","readOnly","disabled","_c3","$RefreshReg$"],"sources":["/Users/franklinbarto/Workspace/React/bbox-finder/src/App.js"],"sourcesContent":["// src/App.js\nimport React, { useState, useRef, useEffect } from 'react';\nimport { \n  MapContainer, \n  TileLayer, \n  FeatureGroup, \n  Marker, \n  Popup, \n  useMapEvents \n} from 'react-leaflet';\nimport { EditControl } from 'react-leaflet-draw';\nimport axios from 'axios';\nimport L from 'leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport 'leaflet-draw/dist/leaflet.draw.css';\nimport './App.css';\n\n// Custom marker icon to fix the missing icon issue\ndelete L.Icon.Default.prototype._getIconUrl;\nL.Icon.Default.mergeOptions({\n  iconRetinaUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-icon-2x.png',\n  iconUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-icon.png',\n  shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-shadow.png',\n});\n\n// Component to track mouse position\nconst MousePositionTracker = ({ onPositionChange }) => {\n  useMapEvents({\n    mousemove: (e) => {\n      const { lat, lng } = e.latlng;\n      onPositionChange({ \n        lat: lat.toFixed(6), \n        lng: lng.toFixed(6) \n      });\n    }\n  });\n  return null;\n};\n\n// Component for placing markers on click\nconst ClickHandler = ({ onMarkerPlace }) => {\n  useMapEvents({\n    click: (e) => {\n      onMarkerPlace(e.latlng);\n    }\n  });\n  return null;\n};\n\nconst App = () => {\n  const [measurements, setMeasurements] = useState({\n    area: 0,\n    perimeter: 0,\n  });\n  const [polygons, setPolygons] = useState([]);\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [errorMessage, setErrorMessage] = useState('');\n  const [markers, setMarkers] = useState([]);\n  const [mousePosition, setMousePosition] = useState({ lat: '0.000000', lng: '0.000000' });\n  const [currentPolygon, setCurrentPolygon] = useState(null);\n  const [isMarkingMode, setIsMarkingMode] = useState(false);\n  const featureGroupRef = useRef();\n  const mapRef = useRef();\n\n  const handleCreate = (e) => {\n    const { layerType, layer } = e;\n    \n    if (layerType === 'polygon') {\n      // Get the coordinates from the created polygon\n      const latLngs = layer.getLatLngs()[0];\n      const coordinates = latLngs.map(latLng => [latLng.lat, latLng.lng]);\n      \n      // Calculate area and perimeter\n      const area = calculateArea(coordinates);\n      const perimeter = calculatePerimeter(coordinates);\n      \n      const newPolygon = {\n        id: Date.now(),\n        coordinates,\n        area: area.toFixed(2),\n        perimeter: perimeter.toFixed(2),\n      };\n      \n      setMeasurements({\n        area: area.toFixed(2),\n        perimeter: perimeter.toFixed(2),\n      });\n      \n      // Add the polygon to state\n      setPolygons([...polygons, newPolygon]);\n      \n      // Set as current polygon\n      setCurrentPolygon(newPolygon);\n    }\n  };\n\n  const calculateArea = (coordinates) => {\n    // Basic area calculation (more accurate implementations would use geodesic calculations)\n    // This is a simplified version - real implementation would use a proper geospatial library\n    let area = 0;\n    for (let i = 0; i < coordinates.length; i++) {\n      const j = (i + 1) % coordinates.length;\n      area += coordinates[i][0] * coordinates[j][1];\n      area -= coordinates[j][0] * coordinates[i][1];\n    }\n    return Math.abs(area) * 111000 * 111000 / 2; // rough conversion to square meters\n  };\n\n  const calculatePerimeter = (coordinates) => {\n    // Basic perimeter calculation\n    let perimeter = 0;\n    for (let i = 0; i < coordinates.length; i++) {\n      const j = (i + 1) % coordinates.length;\n      const dx = coordinates[i][0] - coordinates[j][0];\n      const dy = coordinates[i][1] - coordinates[j][1];\n      perimeter += Math.sqrt(dx * dx + dy * dy);\n    }\n    return perimeter * 111000; // rough conversion to meters\n  };\n\n  const handleMarkerPlace = (latlng) => {\n    if (isMarkingMode) {\n      const newMarker = {\n        id: Date.now(),\n        position: [latlng.lat, latlng.lng],\n        label: `Marker ${markers.length + 1}`\n      };\n      setMarkers([...markers, newMarker]);\n    }\n  };\n\n  const toggleMarkingMode = () => {\n    setIsMarkingMode(!isMarkingMode);\n  };\n\n  const removeMarker = (markerId) => {\n    setMarkers(markers.filter(marker => marker.id !== markerId));\n  };\n\n  const detectBoundaries = async () => {\n    setIsProcessing(true);\n    setErrorMessage('');\n    \n    try {\n      // Get the current map bounds\n      const mapInstance = mapRef.current;\n      const bounds = mapInstance.getBounds();\n      const center = mapInstance.getCenter();\n      const zoom = mapInstance.getZoom();\n      \n      const response = await axios.post('http://localhost:5000/api/detect-boundaries', {\n        bounds: {\n          north: bounds.getNorth(),\n          south: bounds.getSouth(),\n          east: bounds.getEast(),\n          west: bounds.getWest(),\n        },\n        center: {\n          lat: center.lat,\n          lng: center.lng,\n        },\n        zoom: zoom\n      });\n      \n      // Handle the detected boundaries\n      if (response.data.boundaries && response.data.boundaries.length > 0) {\n        // Clear existing drawn layers\n        featureGroupRef.current.clearLayers();\n        \n        // Add the detected boundaries as new polygons\n        const detectedPolygons = [];\n        response.data.boundaries.forEach(boundary => {\n          const coordinates = boundary.coordinates;\n          \n          // Create a new polygon and add it to the feature group\n          const polygon = L.polygon(coordinates);\n          featureGroupRef.current.addLayer(polygon);\n          \n          // Calculate measurements\n          const area = calculateArea(coordinates);\n          const perimeter = calculatePerimeter(coordinates);\n          \n          const newPolygon = {\n            id: Date.now() + Math.random(),\n            coordinates,\n            area: area.toFixed(2),\n            perimeter: perimeter.toFixed(2),\n          };\n          \n          detectedPolygons.push(newPolygon);\n        });\n        \n        setPolygons([...polygons, ...detectedPolygons]);\n        \n        if (detectedPolygons.length > 0) {\n          setCurrentPolygon(detectedPolygons[0]);\n          setMeasurements({\n            area: detectedPolygons[0].area,\n            perimeter: detectedPolygons[0].perimeter,\n          });\n        }\n      } else {\n        setErrorMessage('No boundaries detected in this area');\n      }\n    } catch (error) {\n      console.error('Error detecting boundaries:', error);\n      setErrorMessage('Error detecting boundaries. Please try again.');\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n\n  const exportData = () => {\n    const exportData = {\n      polygons,\n      markers\n    };\n    \n    const dataStr = JSON.stringify(exportData, null, 2);\n    const dataUri = 'data:application/json;charset=utf-8,'+ encodeURIComponent(dataStr);\n    \n    const exportFileDefaultName = 'land-measurements.json';\n    \n    const linkElement = document.createElement('a');\n    linkElement.setAttribute('href', dataUri);\n    linkElement.setAttribute('download', exportFileDefaultName);\n    linkElement.click();\n  };\n\n  const copyPolygonCoordinates = () => {\n    if (currentPolygon) {\n      // Format coordinates as readable text\n      const formattedCoords = currentPolygon.coordinates\n        .map(coord => `[${coord[0].toFixed(6)}, ${coord[1].toFixed(6)}]`)\n        .join(',\\n');\n      \n      navigator.clipboard.writeText(`[\\n${formattedCoords}\\n]`)\n        .then(() => {\n          alert('Polygon coordinates copied to clipboard!');\n        })\n        .catch(err => {\n          console.error('Failed to copy coordinates: ', err);\n          // Fallback for browsers that don't support clipboard API\n          const textArea = document.createElement('textarea');\n          textArea.value = `[\\n${formattedCoords}\\n]`;\n          document.body.appendChild(textArea);\n          textArea.select();\n          document.execCommand('copy');\n          document.body.removeChild(textArea);\n          alert('Polygon coordinates copied to clipboard!');\n        });\n    } else {\n      alert('No polygon selected to copy.');\n    }\n  };\n\n  const handlePolygonSelect = (polygon) => {\n    setCurrentPolygon(polygon);\n    setMeasurements({\n      area: polygon.area,\n      perimeter: polygon.perimeter,\n    });\n  };\n\n  return (\n    <div className=\"app-container\">\n      <header>\n        <h1>Land Measurement App</h1>\n      </header>\n      \n      <div className=\"content\">\n        <div className=\"map-container\">\n          <MapContainer \n            center={[40.505, -100.09]} \n            zoom={13} \n            style={{ height: '600px', width: '100%' }}\n            ref={mapRef}\n          >\n            <TileLayer\n              attribution='&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\n              url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n            />\n            <TileLayer\n              attribution='&copy; <a href=\"https://www.esri.com\">Esri</a>'\n              url=\"https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}\"\n            />\n            <FeatureGroup ref={featureGroupRef}>\n              <EditControl\n                position=\"topright\"\n                onCreated={handleCreate}\n                draw={{\n                  rectangle: false,\n                  circle: false,\n                  circlemarker: false,\n                  marker: false,  // We'll handle markers ourselves\n                  polyline: true,\n                  polygon: true,\n                }}\n              />\n            </FeatureGroup>\n            \n            {/* Display all the markers */}\n            {markers.map(marker => (\n              <Marker \n                key={marker.id} \n                position={marker.position}\n              >\n                <Popup>\n                  <div>\n                    <strong>{marker.label}</strong><br />\n                    Lat: {marker.position[0].toFixed(6)}<br />\n                    Lng: {marker.position[1].toFixed(6)}<br />\n                    <button onClick={() => removeMarker(marker.id)}>Remove</button>\n                  </div>\n                </Popup>\n              </Marker>\n            ))}\n            \n            {/* Mouse position tracker */}\n            <MousePositionTracker onPositionChange={setMousePosition} />\n            \n            {/* Click handler for marker placement */}\n            <ClickHandler onMarkerPlace={handleMarkerPlace} />\n          </MapContainer>\n          \n          <div className=\"mouse-position\">\n            Mouse Position: Lat {mousePosition.lat}, Lng {mousePosition.lng}\n          </div>\n        </div>\n        \n        <div className=\"controls-panel\">\n          <div className=\"measurements\">\n            <h2>Measurements</h2>\n            <p>Area: {measurements.area} m²</p>\n            <p>Perimeter: {measurements.perimeter} m</p>\n            \n            {currentPolygon && (\n              <div className=\"current-polygon\">\n                <h3>Current Polygon</h3>\n                <div className=\"polygon-coordinates-container\">\n                  <textarea \n                    className=\"polygon-coordinates\" \n                    readOnly \n                    value={currentPolygon.coordinates\n                      .map(coord => `[${coord[0].toFixed(6)}, ${coord[1].toFixed(6)}]`)\n                      .join(',\\n')}\n                  />\n                  <button onClick={copyPolygonCoordinates} className=\"copy-button\">\n                    Copy\n                  </button>\n                </div>\n              </div>\n            )}\n          </div>\n          \n          <div className=\"actions\">\n            <button \n              onClick={toggleMarkingMode} \n              className={`action-button ${isMarkingMode ? 'active' : ''}`}\n            >\n              {isMarkingMode ? 'Exit Marking Mode' : 'Place Markers'}\n            </button>\n            \n            <button \n              onClick={detectBoundaries} \n              disabled={isProcessing}\n              className=\"action-button\"\n            >\n              {isProcessing ? 'Processing...' : 'Detect Boundaries'}\n            </button>\n            \n            <button \n              onClick={exportData} \n              disabled={polygons.length === 0 && markers.length === 0}\n              className=\"action-button\"\n            >\n              Export Data\n            </button>\n          </div>\n          \n          {errorMessage && (\n            <div className=\"error-message\">\n              {errorMessage}\n            </div>\n          )}\n          \n          <div className=\"data-sections\">\n            <div className=\"markers-section\">\n              <h3>Placed Markers</h3>\n              {markers.length === 0 ? (\n                <p>No markers placed</p>\n              ) : (\n                <ul>\n                  {markers.map(marker => (\n                    <li key={marker.id}>\n                      <strong>{marker.label}:</strong> {marker.position[0].toFixed(6)}, {marker.position[1].toFixed(6)}\n                      <button \n                        onClick={() => removeMarker(marker.id)}\n                        className=\"small-button\"\n                      >\n                        ×\n                      </button>\n                    </li>\n                  ))}\n                </ul>\n              )}\n            </div>\n            \n            <div className=\"polygons-section\">\n              <h3>Saved Measurements</h3>\n              {polygons.length === 0 ? (\n                <p>No measurements saved</p>\n              ) : (\n                <ul>\n                  {polygons.map(polygon => (\n                    <li \n                      key={polygon.id}\n                      className={currentPolygon && currentPolygon.id === polygon.id ? 'selected' : ''}\n                      onClick={() => handlePolygonSelect(polygon)}\n                    >\n                      Area: {polygon.area} m² | Perimeter: {polygon.perimeter} m\n                    </li>\n                  ))}\n                </ul>\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}