{"ast":null,"code":"var _jsxFileName = \"/Users/franklinbarto/Workspace/React/bbox-finder/src/App.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$(),\n  _s3 = $RefreshSig$();\n// src/App.js\nimport React, { useState, useRef, useEffect } from 'react';\nimport { MapContainer, TileLayer, FeatureGroup, Marker, Popup, useMapEvents } from 'react-leaflet';\nimport { EditControl } from 'react-leaflet-draw';\nimport axios from 'axios';\nimport L from 'leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport 'leaflet-draw/dist/leaflet.draw.css';\nimport './App.css';\n\n// Custom marker icon to fix the missing icon issue\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\ndelete L.Icon.Default.prototype._getIconUrl;\nL.Icon.Default.mergeOptions({\n  iconRetinaUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-icon-2x.png',\n  iconUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-icon.png',\n  shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-shadow.png'\n});\n\n// Component to track mouse position\nconst MousePositionTracker = ({\n  onPositionChange\n}) => {\n  _s();\n  useMapEvents({\n    mousemove: e => {\n      const {\n        lat,\n        lng\n      } = e.latlng;\n      onPositionChange({\n        lat: lat.toFixed(6),\n        lng: lng.toFixed(6)\n      });\n    }\n  });\n  return null;\n};\n\n// Component for placing markers on click and handling border drawing\n_s(MousePositionTracker, \"Ld/tk8Iz8AdZhC1l7acENaOEoCo=\", false, function () {\n  return [useMapEvents];\n});\n_c = MousePositionTracker;\nconst ClickHandler = ({\n  onMarkerPlace,\n  isMarkingMode,\n  isBorderMode,\n  featureGroupRef\n}) => {\n  _s2();\n  const [borderPoints, setBorderPoints] = useState([]);\n  const mapRef = useRef();\n  useMapEvents({\n    click: e => {\n      if (isMarkingMode) {\n        onMarkerPlace(e.latlng);\n      } else if (isBorderMode) {\n        const newPoint = [e.latlng.lat, e.latlng.lng];\n        const updatedPoints = [...borderPoints, newPoint];\n        setBorderPoints(updatedPoints);\n\n        // Clear any existing temporary line\n        if (window.tempLine && mapRef.current && mapRef.current.hasLayer(window.tempLine)) {\n          mapRef.current.removeLayer(window.tempLine);\n        }\n\n        // Get the map instance\n        mapRef.current = mapRef.current || e.target;\n\n        // Draw or update the border line\n        if (updatedPoints.length >= 2) {\n          window.tempLine = L.polyline(updatedPoints, {\n            color: 'red',\n            weight: 3\n          });\n          window.tempLine.addTo(mapRef.current);\n        }\n      }\n    }\n  });\n\n  // Complete the polygon when double clicking in border mode\n  useMapEvents({\n    dblclick: e => {\n      if (isBorderMode && borderPoints.length >= 3) {\n        // Remove the temporary line\n        if (window.tempLine && mapRef.current && mapRef.current.hasLayer(window.tempLine)) {\n          mapRef.current.removeLayer(window.tempLine);\n          window.tempLine = null;\n        }\n\n        // Create a proper polygon using Leaflet's L.polygon\n        const polygon = L.polygon(borderPoints, {\n          color: 'blue',\n          weight: 2\n        });\n\n        // Add the polygon to the feature group\n        if (featureGroupRef.current) {\n          featureGroupRef.current.addLayer(polygon);\n\n          // Create a synthetic \"created\" event to trigger the same handling as Leaflet Draw\n          const syntheticEvent = {\n            layerType: 'polygon',\n            layer: polygon\n          };\n\n          // Dispatch a custom event that will be caught by our event listener\n          const customEvent = new CustomEvent('border-polygon-created', {\n            detail: syntheticEvent\n          });\n          document.dispatchEvent(customEvent);\n        }\n\n        // Reset border points after creating polygon\n        setBorderPoints([]);\n      }\n    }\n  });\n\n  // If border mode is turned off, clean up and reset\n  useEffect(() => {\n    if (!isBorderMode && mapRef.current && window.tempLine) {\n      mapRef.current.removeLayer(window.tempLine);\n      window.tempLine = null;\n      setBorderPoints([]);\n    }\n  }, [isBorderMode]);\n  return null;\n};\n\n// Unit conversion constants\n_s2(ClickHandler, \"fyZ5RevQibXPnT1z5C1FFvk4b+o=\", false, function () {\n  return [useMapEvents, useMapEvents];\n});\n_c2 = ClickHandler;\nconst UNIT_CONVERSIONS = {\n  squareMeters: {\n    acres: 0.000247105,\n    hectares: 0.0001,\n    squareFeet: 10.7639,\n    squareKilometers: 0.000001,\n    squareMiles: 3.86102e-7\n  }\n};\nconst App = () => {\n  _s3();\n  const [measurements, setMeasurements] = useState({\n    squareMeters: 0,\n    acres: 0,\n    hectares: 0,\n    squareFeet: 0,\n    squareKilometers: 0,\n    squareMiles: 0,\n    perimeter: 0\n  });\n  const [polygons, setPolygons] = useState([]);\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [errorMessage, setErrorMessage] = useState('');\n  const [markers, setMarkers] = useState([]);\n  const [mousePosition, setMousePosition] = useState({\n    lat: '0.000000',\n    lng: '0.000000'\n  });\n  const [currentPolygon, setCurrentPolygon] = useState(null);\n  const [isMarkingMode, setIsMarkingMode] = useState(false);\n  const [isBorderMode, setIsBorderMode] = useState(false);\n  const [selectedUnit, setSelectedUnit] = useState('squareMeters');\n  const featureGroupRef = useRef();\n  const mapRef = useRef();\n\n  // Add event listener for custom border polygon creation\n  useEffect(() => {\n    const handleBorderPolygonCreated = e => {\n      handleCreate(e.detail);\n    };\n    document.addEventListener('border-polygon-created', handleBorderPolygonCreated);\n    return () => {\n      document.removeEventListener('border-polygon-created', handleBorderPolygonCreated);\n    };\n  }, [polygons]); // Add polygons as a dependency since handleCreate uses it\n\n  const handleCreate = e => {\n    const {\n      layerType,\n      layer\n    } = e;\n    if (layerType === 'polygon') {\n      // Get the coordinates from the created polygon\n      const latLngs = layer.getLatLngs()[0];\n      const coordinates = latLngs.map(latLng => [latLng.lat, latLng.lng]);\n\n      // Calculate area and perimeter\n      const areaInSquareMeters = calculateArea(coordinates);\n      const perimeterInMeters = calculatePerimeter(coordinates);\n\n      // Convert to different units\n      const areaCalculations = {\n        squareMeters: areaInSquareMeters,\n        acres: areaInSquareMeters * UNIT_CONVERSIONS.squareMeters.acres,\n        hectares: areaInSquareMeters * UNIT_CONVERSIONS.squareMeters.hectares,\n        squareFeet: areaInSquareMeters * UNIT_CONVERSIONS.squareMeters.squareFeet,\n        squareKilometers: areaInSquareMeters * UNIT_CONVERSIONS.squareMeters.squareKilometers,\n        squareMiles: areaInSquareMeters * UNIT_CONVERSIONS.squareMeters.squareMiles,\n        perimeter: perimeterInMeters\n      };\n      const newPolygon = {\n        id: Date.now(),\n        coordinates,\n        ...areaCalculations\n      };\n      setMeasurements(areaCalculations);\n\n      // Add the polygon to state\n      setPolygons([...polygons, newPolygon]);\n\n      // Set as current polygon\n      setCurrentPolygon(newPolygon);\n    }\n  };\n  const calculateArea = coordinates => {\n    // Basic area calculation (more accurate implementations would use geodesic calculations)\n    // This is a simplified version - real implementation would use a proper geospatial library\n    let area = 0;\n    for (let i = 0; i < coordinates.length; i++) {\n      const j = (i + 1) % coordinates.length;\n      area += coordinates[i][0] * coordinates[j][1];\n      area -= coordinates[j][0] * coordinates[i][1];\n    }\n    return Math.abs(area) * 111000 * 111000 / 2; // rough conversion to square meters\n  };\n  const calculatePerimeter = coordinates => {\n    // Basic perimeter calculation\n    let perimeter = 0;\n    for (let i = 0; i < coordinates.length; i++) {\n      const j = (i + 1) % coordinates.length;\n      const dx = coordinates[i][0] - coordinates[j][0];\n      const dy = coordinates[i][1] - coordinates[j][1];\n      perimeter += Math.sqrt(dx * dx + dy * dy);\n    }\n    return perimeter * 111000; // rough conversion to meters\n  };\n  const handleMarkerPlace = latlng => {\n    if (isMarkingMode) {\n      const newMarker = {\n        id: Date.now(),\n        position: [latlng.lat, latlng.lng],\n        label: `Marker ${markers.length + 1}`\n      };\n      setMarkers([...markers, newMarker]);\n    }\n  };\n  const toggleMarkingMode = () => {\n    setIsMarkingMode(!isMarkingMode);\n    if (isBorderMode) setIsBorderMode(false);\n  };\n  const toggleBorderMode = () => {\n    setIsBorderMode(!isBorderMode);\n    if (isMarkingMode) setIsMarkingMode(false);\n  };\n  const removeMarker = markerId => {\n    setMarkers(markers.filter(marker => marker.id !== markerId));\n  };\n  const detectBoundaries = async () => {\n    setIsProcessing(true);\n    setErrorMessage('');\n    try {\n      // Get the current map bounds\n      const mapInstance = mapRef.current;\n      const bounds = mapInstance.getBounds();\n      const center = mapInstance.getCenter();\n      const zoom = mapInstance.getZoom();\n      const response = await axios.post('http://localhost:5000/api/detect-boundaries', {\n        bounds: {\n          north: bounds.getNorth(),\n          south: bounds.getSouth(),\n          east: bounds.getEast(),\n          west: bounds.getWest()\n        },\n        center: {\n          lat: center.lat,\n          lng: center.lng\n        },\n        zoom: zoom\n      });\n\n      // Handle the detected boundaries\n      if (response.data.boundaries && response.data.boundaries.length > 0) {\n        // Clear existing drawn layers\n        featureGroupRef.current.clearLayers();\n\n        // Add the detected boundaries as new polygons\n        const detectedPolygons = [];\n        response.data.boundaries.forEach(boundary => {\n          const coordinates = boundary.coordinates;\n\n          // Create a new polygon and add it to the feature group\n          const polygon = L.polygon(coordinates);\n          featureGroupRef.current.addLayer(polygon);\n\n          // Calculate measurements\n          const areaInSquareMeters = calculateArea(coordinates);\n          const perimeterInMeters = calculatePerimeter(coordinates);\n\n          // Convert to different units\n          const areaCalculations = {\n            squareMeters: areaInSquareMeters,\n            acres: areaInSquareMeters * UNIT_CONVERSIONS.squareMeters.acres,\n            hectares: areaInSquareMeters * UNIT_CONVERSIONS.squareMeters.hectares,\n            squareFeet: areaInSquareMeters * UNIT_CONVERSIONS.squareMeters.squareFeet,\n            squareKilometers: areaInSquareMeters * UNIT_CONVERSIONS.squareMeters.squareKilometers,\n            squareMiles: areaInSquareMeters * UNIT_CONVERSIONS.squareMeters.squareMiles,\n            perimeter: perimeterInMeters\n          };\n          const newPolygon = {\n            id: Date.now() + Math.random(),\n            coordinates,\n            ...areaCalculations\n          };\n          detectedPolygons.push(newPolygon);\n        });\n        setPolygons([...polygons, ...detectedPolygons]);\n        if (detectedPolygons.length > 0) {\n          setCurrentPolygon(detectedPolygons[0]);\n          setMeasurements({\n            squareMeters: detectedPolygons[0].squareMeters,\n            acres: detectedPolygons[0].acres,\n            hectares: detectedPolygons[0].hectares,\n            squareFeet: detectedPolygons[0].squareFeet,\n            squareKilometers: detectedPolygons[0].squareKilometers,\n            squareMiles: detectedPolygons[0].squareMiles,\n            perimeter: detectedPolygons[0].perimeter\n          });\n        }\n      } else {\n        setErrorMessage('No boundaries detected in this area');\n      }\n    } catch (error) {\n      console.error('Error detecting boundaries:', error);\n      setErrorMessage('Error detecting boundaries. Please try again.');\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n  const exportData = () => {\n    const exportData = {\n      polygons,\n      markers\n    };\n    const dataStr = JSON.stringify(exportData, null, 2);\n    const dataUri = 'data:application/json;charset=utf-8,' + encodeURIComponent(dataStr);\n    const exportFileDefaultName = 'land-measurements.json';\n    const linkElement = document.createElement('a');\n    linkElement.setAttribute('href', dataUri);\n    linkElement.setAttribute('download', exportFileDefaultName);\n    linkElement.click();\n  };\n  const copyPolygonCoordinates = () => {\n    if (currentPolygon) {\n      // Format coordinates as readable text\n      const formattedCoords = currentPolygon.coordinates.map(coord => `[${coord[0].toFixed(6)}, ${coord[1].toFixed(6)}]`).join(',\\n');\n      navigator.clipboard.writeText(`[\\n${formattedCoords}\\n]`).then(() => {\n        alert('Polygon coordinates copied to clipboard!');\n      }).catch(err => {\n        console.error('Failed to copy coordinates: ', err);\n        // Fallback for browsers that don't support clipboard API\n        const textArea = document.createElement('textarea');\n        textArea.value = `[\\n${formattedCoords}\\n]`;\n        document.body.appendChild(textArea);\n        textArea.select();\n        document.execCommand('copy');\n        document.body.removeChild(textArea);\n        alert('Polygon coordinates copied to clipboard!');\n      });\n    } else {\n      alert('No polygon selected to copy.');\n    }\n  };\n  const handlePolygonSelect = polygon => {\n    setCurrentPolygon(polygon);\n    setMeasurements({\n      squareMeters: polygon.squareMeters,\n      acres: polygon.acres,\n      hectares: polygon.hectares,\n      squareFeet: polygon.squareFeet,\n      squareKilometers: polygon.squareKilometers,\n      squareMiles: polygon.squareMiles,\n      perimeter: polygon.perimeter\n    });\n  };\n\n  // Format the measurement value based on the unit\n  const formatMeasurement = (value, unit) => {\n    const precision = {\n      squareMeters: 2,\n      acres: 4,\n      hectares: 4,\n      squareFeet: 2,\n      squareKilometers: 6,\n      squareMiles: 6,\n      perimeter: 2\n    };\n    return Number(value).toFixed(precision[unit] || 2);\n  };\n\n  // Unit labels for display\n  const unitLabels = {\n    squareMeters: 'm²',\n    acres: 'acres',\n    hectares: 'ha',\n    squareFeet: 'ft²',\n    squareKilometers: 'km²',\n    squareMiles: 'mi²',\n    perimeter: 'm'\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Land Measurement App\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 427,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 426,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"content\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"map-container\",\n        children: [/*#__PURE__*/_jsxDEV(MapContainer, {\n          center: [40.505, -100.09],\n          zoom: 13,\n          style: {\n            height: '600px',\n            width: '100%'\n          },\n          ref: mapRef,\n          children: [/*#__PURE__*/_jsxDEV(TileLayer, {\n            attribution: \"\\xA9 <a href=\\\"https://www.openstreetmap.org/copyright\\\">OpenStreetMap</a> contributors\",\n            url: \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 438,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(TileLayer, {\n            attribution: \"\\xA9 <a href=\\\"https://www.esri.com\\\">Esri</a>\",\n            url: \"https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 442,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(FeatureGroup, {\n            ref: featureGroupRef,\n            children: /*#__PURE__*/_jsxDEV(EditControl, {\n              position: \"topright\",\n              onCreated: handleCreate,\n              draw: {\n                rectangle: false,\n                circle: false,\n                circlemarker: false,\n                marker: false,\n                // We'll handle markers ourselves\n                polyline: true,\n                polygon: true\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 447,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 446,\n            columnNumber: 13\n          }, this), markers.map(marker => /*#__PURE__*/_jsxDEV(Marker, {\n            position: marker.position,\n            children: /*#__PURE__*/_jsxDEV(Popup, {\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: marker.label\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 469,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 469,\n                  columnNumber: 52\n                }, this), \"Lat: \", marker.position[0].toFixed(6), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 470,\n                  columnNumber: 57\n                }, this), \"Lng: \", marker.position[1].toFixed(6), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 471,\n                  columnNumber: 57\n                }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                  onClick: () => removeMarker(marker.id),\n                  children: \"Remove\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 472,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 468,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 467,\n              columnNumber: 17\n            }, this)\n          }, marker.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 463,\n            columnNumber: 15\n          }, this)), /*#__PURE__*/_jsxDEV(MousePositionTracker, {\n            onPositionChange: setMousePosition\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 479,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(ClickHandler, {\n            onMarkerPlace: handleMarkerPlace,\n            isMarkingMode: isMarkingMode,\n            isBorderMode: isBorderMode,\n            featureGroupRef: featureGroupRef\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 482,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 432,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mouse-position\",\n          children: [\"Mouse Position: Lat \", mousePosition.lat, \", Lng \", mousePosition.lng]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 490,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 431,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"controls-panel\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"measurements\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Measurements\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 497,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"measurement-units\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"unit-select\",\n              children: \"Display unit:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 500,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n              id: \"unit-select\",\n              value: selectedUnit,\n              onChange: e => setSelectedUnit(e.target.value),\n              className: \"unit-select\",\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"squareMeters\",\n                children: \"Square Meters (m\\xB2)\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 507,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"acres\",\n                children: \"Acres\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 508,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"hectares\",\n                children: \"Hectares (ha)\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 509,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"squareFeet\",\n                children: \"Square Feet (ft\\xB2)\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 510,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"squareKilometers\",\n                children: \"Square Kilometers (km\\xB2)\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 511,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"squareMiles\",\n                children: \"Square Miles (mi\\xB2)\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 512,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 501,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 499,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"measurements-grid\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"measurement-item\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"measurement-label\",\n                children: \"Area (m\\xB2):\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 518,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"measurement-value\",\n                children: [formatMeasurement(measurements.squareMeters), \" m\\xB2\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 519,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 517,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"measurement-item\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"measurement-label\",\n                children: \"Area (acres):\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 522,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"measurement-value\",\n                children: [formatMeasurement(measurements.acres, 'acres'), \" acres\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 523,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 521,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"measurement-item\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"measurement-label\",\n                children: \"Area (ha):\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 526,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"measurement-value\",\n                children: [formatMeasurement(measurements.hectares, 'hectares'), \" ha\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 527,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 525,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"measurement-item\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"measurement-label\",\n                children: \"Area (ft\\xB2):\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 530,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"measurement-value\",\n                children: [formatMeasurement(measurements.squareFeet, 'squareFeet'), \" ft\\xB2\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 531,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 529,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"measurement-item\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"measurement-label\",\n                children: \"Area (km\\xB2):\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 534,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"measurement-value\",\n                children: [formatMeasurement(measurements.squareKilometers, 'squareKilometers'), \" km\\xB2\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 535,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 533,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"measurement-item\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"measurement-label\",\n                children: \"Area (mi\\xB2):\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 538,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"measurement-value\",\n                children: [formatMeasurement(measurements.squareMiles, 'squareMiles'), \" mi\\xB2\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 539,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 537,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"measurement-item\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"measurement-label\",\n                children: \"Perimeter:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 542,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"measurement-value\",\n                children: [formatMeasurement(measurements.perimeter, 'perimeter'), \" m\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 543,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 541,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 516,\n            columnNumber: 13\n          }, this), currentPolygon && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"current-polygon\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              children: \"Current Polygon\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 549,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"polygon-coordinates-container\",\n              children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n                className: \"polygon-coordinates\",\n                readOnly: true,\n                value: currentPolygon.coordinates.map(coord => `[${coord[0].toFixed(6)}, ${coord[1].toFixed(6)}]`).join(',\\n')\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 551,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: copyPolygonCoordinates,\n                className: \"copy-button\",\n                children: \"Copy\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 558,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 550,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 548,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 496,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"actions\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: toggleMarkingMode,\n            className: `action-button ${isMarkingMode ? 'active' : ''}`,\n            children: isMarkingMode ? 'Exit Marker Mode' : 'Place Markers'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 567,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: toggleBorderMode,\n            className: `action-button ${isBorderMode ? 'active' : ''}`,\n            children: isBorderMode ? 'Exit Border Mode' : 'Draw Border'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 574,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: detectBoundaries,\n            disabled: isProcessing,\n            className: \"action-button\",\n            children: isProcessing ? 'Processing...' : 'Detect Boundaries'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 581,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: exportData,\n            disabled: polygons.length === 0 && markers.length === 0,\n            className: \"action-button\",\n            children: \"Export Data\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 589,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 566,\n          columnNumber: 11\n        }, this), errorMessage && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"error-message\",\n          children: errorMessage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 599,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"data-sections\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"markers-section\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              children: \"Placed Markers\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 606,\n              columnNumber: 15\n            }, this), markers.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"No markers placed\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 608,\n              columnNumber: 17\n            }, this) : /*#__PURE__*/_jsxDEV(\"ul\", {\n              children: markers.map(marker => /*#__PURE__*/_jsxDEV(\"li\", {\n                children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: [marker.label, \":\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 613,\n                  columnNumber: 23\n                }, this), \" \", marker.position[0].toFixed(6), \", \", marker.position[1].toFixed(6), /*#__PURE__*/_jsxDEV(\"button\", {\n                  onClick: () => removeMarker(marker.id),\n                  className: \"small-button\",\n                  children: \"\\xD7\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 614,\n                  columnNumber: 23\n                }, this)]\n              }, marker.id, true, {\n                fileName: _jsxFileName,\n                lineNumber: 612,\n                columnNumber: 21\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 610,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 605,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"polygons-section\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              children: \"Saved Measurements\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 627,\n              columnNumber: 15\n            }, this), polygons.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"No measurements saved\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 629,\n              columnNumber: 17\n            }, this) : /*#__PURE__*/_jsxDEV(\"ul\", {\n              children: polygons.map(polygon => /*#__PURE__*/_jsxDEV(\"li\", {\n                className: currentPolygon && currentPolygon.id === polygon.id ? 'selected' : '',\n                onClick: () => handlePolygonSelect(polygon),\n                children: [\"Area: \", formatMeasurement(polygon[selectedUnit], selectedUnit), \" \", unitLabels[selectedUnit], \" | Perimeter: \", formatMeasurement(polygon.perimeter, 'perimeter'), \" m\"]\n              }, polygon.id, true, {\n                fileName: _jsxFileName,\n                lineNumber: 633,\n                columnNumber: 21\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 631,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 626,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 604,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 495,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 430,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 425,\n    columnNumber: 5\n  }, this);\n};\n_s3(App, \"cSsBp0qgurKJvgmTQLUeANg1vk0=\");\n_c3 = App;\nexport default App;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"MousePositionTracker\");\n$RefreshReg$(_c2, \"ClickHandler\");\n$RefreshReg$(_c3, \"App\");","map":{"version":3,"names":["React","useState","useRef","useEffect","MapContainer","TileLayer","FeatureGroup","Marker","Popup","useMapEvents","EditControl","axios","L","jsxDEV","_jsxDEV","Icon","Default","prototype","_getIconUrl","mergeOptions","iconRetinaUrl","iconUrl","shadowUrl","MousePositionTracker","onPositionChange","_s","mousemove","e","lat","lng","latlng","toFixed","_c","ClickHandler","onMarkerPlace","isMarkingMode","isBorderMode","featureGroupRef","_s2","borderPoints","setBorderPoints","mapRef","click","newPoint","updatedPoints","window","tempLine","current","hasLayer","removeLayer","target","length","polyline","color","weight","addTo","dblclick","polygon","addLayer","syntheticEvent","layerType","layer","customEvent","CustomEvent","detail","document","dispatchEvent","_c2","UNIT_CONVERSIONS","squareMeters","acres","hectares","squareFeet","squareKilometers","squareMiles","App","_s3","measurements","setMeasurements","perimeter","polygons","setPolygons","isProcessing","setIsProcessing","errorMessage","setErrorMessage","markers","setMarkers","mousePosition","setMousePosition","currentPolygon","setCurrentPolygon","setIsMarkingMode","setIsBorderMode","selectedUnit","setSelectedUnit","handleBorderPolygonCreated","handleCreate","addEventListener","removeEventListener","latLngs","getLatLngs","coordinates","map","latLng","areaInSquareMeters","calculateArea","perimeterInMeters","calculatePerimeter","areaCalculations","newPolygon","id","Date","now","area","i","j","Math","abs","dx","dy","sqrt","handleMarkerPlace","newMarker","position","label","toggleMarkingMode","toggleBorderMode","removeMarker","markerId","filter","marker","detectBoundaries","mapInstance","bounds","getBounds","center","getCenter","zoom","getZoom","response","post","north","getNorth","south","getSouth","east","getEast","west","getWest","data","boundaries","clearLayers","detectedPolygons","forEach","boundary","random","push","error","console","exportData","dataStr","JSON","stringify","dataUri","encodeURIComponent","exportFileDefaultName","linkElement","createElement","setAttribute","copyPolygonCoordinates","formattedCoords","coord","join","navigator","clipboard","writeText","then","alert","catch","err","textArea","value","body","appendChild","select","execCommand","removeChild","handlePolygonSelect","formatMeasurement","unit","precision","Number","unitLabels","className","children","fileName","_jsxFileName","lineNumber","columnNumber","style","height","width","ref","attribution","url","onCreated","draw","rectangle","circle","circlemarker","onClick","htmlFor","onChange","readOnly","disabled","_c3","$RefreshReg$"],"sources":["/Users/franklinbarto/Workspace/React/bbox-finder/src/App.js"],"sourcesContent":["// src/App.js\nimport React, { useState, useRef, useEffect } from 'react';\nimport { \n  MapContainer, \n  TileLayer, \n  FeatureGroup, \n  Marker, \n  Popup, \n  useMapEvents \n} from 'react-leaflet';\nimport { EditControl } from 'react-leaflet-draw';\nimport axios from 'axios';\nimport L from 'leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport 'leaflet-draw/dist/leaflet.draw.css';\nimport './App.css';\n\n// Custom marker icon to fix the missing icon issue\ndelete L.Icon.Default.prototype._getIconUrl;\nL.Icon.Default.mergeOptions({\n  iconRetinaUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-icon-2x.png',\n  iconUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-icon.png',\n  shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-shadow.png',\n});\n\n// Component to track mouse position\nconst MousePositionTracker = ({ onPositionChange }) => {\n  useMapEvents({\n    mousemove: (e) => {\n      const { lat, lng } = e.latlng;\n      onPositionChange({ \n        lat: lat.toFixed(6), \n        lng: lng.toFixed(6) \n      });\n    }\n  });\n  return null;\n};\n\n// Component for placing markers on click and handling border drawing\nconst ClickHandler = ({ onMarkerPlace, isMarkingMode, isBorderMode, featureGroupRef }) => {\n  const [borderPoints, setBorderPoints] = useState([]);\n  const mapRef = useRef();\n  \n  useMapEvents({\n    click: (e) => {\n      if (isMarkingMode) {\n        onMarkerPlace(e.latlng);\n      } else if (isBorderMode) {\n        const newPoint = [e.latlng.lat, e.latlng.lng];\n        const updatedPoints = [...borderPoints, newPoint];\n        setBorderPoints(updatedPoints);\n        \n        // Clear any existing temporary line\n        if (window.tempLine && mapRef.current && mapRef.current.hasLayer(window.tempLine)) {\n          mapRef.current.removeLayer(window.tempLine);\n        }\n        \n        // Get the map instance\n        mapRef.current = mapRef.current || e.target;\n        \n        // Draw or update the border line\n        if (updatedPoints.length >= 2) {\n          window.tempLine = L.polyline(updatedPoints, { color: 'red', weight: 3 });\n          window.tempLine.addTo(mapRef.current);\n        }\n      }\n    }\n  });\n  \n  // Complete the polygon when double clicking in border mode\n  useMapEvents({\n    dblclick: (e) => {\n      if (isBorderMode && borderPoints.length >= 3) {\n        // Remove the temporary line\n        if (window.tempLine && mapRef.current && mapRef.current.hasLayer(window.tempLine)) {\n          mapRef.current.removeLayer(window.tempLine);\n          window.tempLine = null;\n        }\n        \n        // Create a proper polygon using Leaflet's L.polygon\n        const polygon = L.polygon(borderPoints, { color: 'blue', weight: 2 });\n        \n        // Add the polygon to the feature group\n        if (featureGroupRef.current) {\n          featureGroupRef.current.addLayer(polygon);\n          \n          // Create a synthetic \"created\" event to trigger the same handling as Leaflet Draw\n          const syntheticEvent = {\n            layerType: 'polygon',\n            layer: polygon\n          };\n          \n          // Dispatch a custom event that will be caught by our event listener\n          const customEvent = new CustomEvent('border-polygon-created', { \n            detail: syntheticEvent \n          });\n          document.dispatchEvent(customEvent);\n        }\n        \n        // Reset border points after creating polygon\n        setBorderPoints([]);\n      }\n    }\n  });\n  \n  // If border mode is turned off, clean up and reset\n  useEffect(() => {\n    if (!isBorderMode && mapRef.current && window.tempLine) {\n      mapRef.current.removeLayer(window.tempLine);\n      window.tempLine = null;\n      setBorderPoints([]);\n    }\n  }, [isBorderMode]);\n  \n  return null;\n};\n\n// Unit conversion constants\nconst UNIT_CONVERSIONS = {\n  squareMeters: {\n    acres: 0.000247105,\n    hectares: 0.0001,\n    squareFeet: 10.7639,\n    squareKilometers: 0.000001,\n    squareMiles: 3.86102e-7\n  }\n};\n\nconst App = () => {\n  const [measurements, setMeasurements] = useState({\n    squareMeters: 0,\n    acres: 0,\n    hectares: 0,\n    squareFeet: 0,\n    squareKilometers: 0,\n    squareMiles: 0,\n    perimeter: 0\n  });\n  const [polygons, setPolygons] = useState([]);\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [errorMessage, setErrorMessage] = useState('');\n  const [markers, setMarkers] = useState([]);\n  const [mousePosition, setMousePosition] = useState({ lat: '0.000000', lng: '0.000000' });\n  const [currentPolygon, setCurrentPolygon] = useState(null);\n  const [isMarkingMode, setIsMarkingMode] = useState(false);\n  const [isBorderMode, setIsBorderMode] = useState(false);\n  const [selectedUnit, setSelectedUnit] = useState('squareMeters');\n  const featureGroupRef = useRef();\n  const mapRef = useRef();\n\n  // Add event listener for custom border polygon creation\n  useEffect(() => {\n    const handleBorderPolygonCreated = (e) => {\n      handleCreate(e.detail);\n    };\n    \n    document.addEventListener('border-polygon-created', handleBorderPolygonCreated);\n    \n    return () => {\n      document.removeEventListener('border-polygon-created', handleBorderPolygonCreated);\n    };\n  }, [polygons]); // Add polygons as a dependency since handleCreate uses it\n\n  const handleCreate = (e) => {\n    const { layerType, layer } = e;\n    \n    if (layerType === 'polygon') {\n      // Get the coordinates from the created polygon\n      const latLngs = layer.getLatLngs()[0];\n      const coordinates = latLngs.map(latLng => [latLng.lat, latLng.lng]);\n      \n      // Calculate area and perimeter\n      const areaInSquareMeters = calculateArea(coordinates);\n      const perimeterInMeters = calculatePerimeter(coordinates);\n      \n      // Convert to different units\n      const areaCalculations = {\n        squareMeters: areaInSquareMeters,\n        acres: areaInSquareMeters * UNIT_CONVERSIONS.squareMeters.acres,\n        hectares: areaInSquareMeters * UNIT_CONVERSIONS.squareMeters.hectares,\n        squareFeet: areaInSquareMeters * UNIT_CONVERSIONS.squareMeters.squareFeet,\n        squareKilometers: areaInSquareMeters * UNIT_CONVERSIONS.squareMeters.squareKilometers,\n        squareMiles: areaInSquareMeters * UNIT_CONVERSIONS.squareMeters.squareMiles,\n        perimeter: perimeterInMeters\n      };\n      \n      const newPolygon = {\n        id: Date.now(),\n        coordinates,\n        ...areaCalculations\n      };\n      \n      setMeasurements(areaCalculations);\n      \n      // Add the polygon to state\n      setPolygons([...polygons, newPolygon]);\n      \n      // Set as current polygon\n      setCurrentPolygon(newPolygon);\n    }\n  };\n\n  const calculateArea = (coordinates) => {\n    // Basic area calculation (more accurate implementations would use geodesic calculations)\n    // This is a simplified version - real implementation would use a proper geospatial library\n    let area = 0;\n    for (let i = 0; i < coordinates.length; i++) {\n      const j = (i + 1) % coordinates.length;\n      area += coordinates[i][0] * coordinates[j][1];\n      area -= coordinates[j][0] * coordinates[i][1];\n    }\n    return Math.abs(area) * 111000 * 111000 / 2; // rough conversion to square meters\n  };\n\n  const calculatePerimeter = (coordinates) => {\n    // Basic perimeter calculation\n    let perimeter = 0;\n    for (let i = 0; i < coordinates.length; i++) {\n      const j = (i + 1) % coordinates.length;\n      const dx = coordinates[i][0] - coordinates[j][0];\n      const dy = coordinates[i][1] - coordinates[j][1];\n      perimeter += Math.sqrt(dx * dx + dy * dy);\n    }\n    return perimeter * 111000; // rough conversion to meters\n  };\n\n  const handleMarkerPlace = (latlng) => {\n    if (isMarkingMode) {\n      const newMarker = {\n        id: Date.now(),\n        position: [latlng.lat, latlng.lng],\n        label: `Marker ${markers.length + 1}`\n      };\n      setMarkers([...markers, newMarker]);\n    }\n  };\n\n  const toggleMarkingMode = () => {\n    setIsMarkingMode(!isMarkingMode);\n    if (isBorderMode) setIsBorderMode(false);\n  };\n\n  const toggleBorderMode = () => {\n    setIsBorderMode(!isBorderMode);\n    if (isMarkingMode) setIsMarkingMode(false);\n  };\n\n  const removeMarker = (markerId) => {\n    setMarkers(markers.filter(marker => marker.id !== markerId));\n  };\n\n  const detectBoundaries = async () => {\n    setIsProcessing(true);\n    setErrorMessage('');\n    \n    try {\n      // Get the current map bounds\n      const mapInstance = mapRef.current;\n      const bounds = mapInstance.getBounds();\n      const center = mapInstance.getCenter();\n      const zoom = mapInstance.getZoom();\n      \n      const response = await axios.post('http://localhost:5000/api/detect-boundaries', {\n        bounds: {\n          north: bounds.getNorth(),\n          south: bounds.getSouth(),\n          east: bounds.getEast(),\n          west: bounds.getWest(),\n        },\n        center: {\n          lat: center.lat,\n          lng: center.lng,\n        },\n        zoom: zoom\n      });\n      \n      // Handle the detected boundaries\n      if (response.data.boundaries && response.data.boundaries.length > 0) {\n        // Clear existing drawn layers\n        featureGroupRef.current.clearLayers();\n        \n        // Add the detected boundaries as new polygons\n        const detectedPolygons = [];\n        response.data.boundaries.forEach(boundary => {\n          const coordinates = boundary.coordinates;\n          \n          // Create a new polygon and add it to the feature group\n          const polygon = L.polygon(coordinates);\n          featureGroupRef.current.addLayer(polygon);\n          \n          // Calculate measurements\n          const areaInSquareMeters = calculateArea(coordinates);\n          const perimeterInMeters = calculatePerimeter(coordinates);\n          \n          // Convert to different units\n          const areaCalculations = {\n            squareMeters: areaInSquareMeters,\n            acres: areaInSquareMeters * UNIT_CONVERSIONS.squareMeters.acres,\n            hectares: areaInSquareMeters * UNIT_CONVERSIONS.squareMeters.hectares,\n            squareFeet: areaInSquareMeters * UNIT_CONVERSIONS.squareMeters.squareFeet,\n            squareKilometers: areaInSquareMeters * UNIT_CONVERSIONS.squareMeters.squareKilometers,\n            squareMiles: areaInSquareMeters * UNIT_CONVERSIONS.squareMeters.squareMiles,\n            perimeter: perimeterInMeters\n          };\n          \n          const newPolygon = {\n            id: Date.now() + Math.random(),\n            coordinates,\n            ...areaCalculations\n          };\n          \n          detectedPolygons.push(newPolygon);\n        });\n        \n        setPolygons([...polygons, ...detectedPolygons]);\n        \n        if (detectedPolygons.length > 0) {\n          setCurrentPolygon(detectedPolygons[0]);\n          setMeasurements({\n            squareMeters: detectedPolygons[0].squareMeters,\n            acres: detectedPolygons[0].acres,\n            hectares: detectedPolygons[0].hectares,\n            squareFeet: detectedPolygons[0].squareFeet,\n            squareKilometers: detectedPolygons[0].squareKilometers,\n            squareMiles: detectedPolygons[0].squareMiles,\n            perimeter: detectedPolygons[0].perimeter\n          });\n        }\n      } else {\n        setErrorMessage('No boundaries detected in this area');\n      }\n    } catch (error) {\n      console.error('Error detecting boundaries:', error);\n      setErrorMessage('Error detecting boundaries. Please try again.');\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n\n  const exportData = () => {\n    const exportData = {\n      polygons,\n      markers\n    };\n    \n    const dataStr = JSON.stringify(exportData, null, 2);\n    const dataUri = 'data:application/json;charset=utf-8,'+ encodeURIComponent(dataStr);\n    \n    const exportFileDefaultName = 'land-measurements.json';\n    \n    const linkElement = document.createElement('a');\n    linkElement.setAttribute('href', dataUri);\n    linkElement.setAttribute('download', exportFileDefaultName);\n    linkElement.click();\n  };\n\n  const copyPolygonCoordinates = () => {\n    if (currentPolygon) {\n      // Format coordinates as readable text\n      const formattedCoords = currentPolygon.coordinates\n        .map(coord => `[${coord[0].toFixed(6)}, ${coord[1].toFixed(6)}]`)\n        .join(',\\n');\n      \n      navigator.clipboard.writeText(`[\\n${formattedCoords}\\n]`)\n        .then(() => {\n          alert('Polygon coordinates copied to clipboard!');\n        })\n        .catch(err => {\n          console.error('Failed to copy coordinates: ', err);\n          // Fallback for browsers that don't support clipboard API\n          const textArea = document.createElement('textarea');\n          textArea.value = `[\\n${formattedCoords}\\n]`;\n          document.body.appendChild(textArea);\n          textArea.select();\n          document.execCommand('copy');\n          document.body.removeChild(textArea);\n          alert('Polygon coordinates copied to clipboard!');\n        });\n    } else {\n      alert('No polygon selected to copy.');\n    }\n  };\n\n  const handlePolygonSelect = (polygon) => {\n    setCurrentPolygon(polygon);\n    setMeasurements({\n      squareMeters: polygon.squareMeters,\n      acres: polygon.acres,\n      hectares: polygon.hectares,\n      squareFeet: polygon.squareFeet,\n      squareKilometers: polygon.squareKilometers,\n      squareMiles: polygon.squareMiles,\n      perimeter: polygon.perimeter\n    });\n  };\n\n  // Format the measurement value based on the unit\n  const formatMeasurement = (value, unit) => {\n    const precision = {\n      squareMeters: 2,\n      acres: 4,\n      hectares: 4,\n      squareFeet: 2,\n      squareKilometers: 6,\n      squareMiles: 6,\n      perimeter: 2\n    };\n    \n    return Number(value).toFixed(precision[unit] || 2);\n  };\n\n  // Unit labels for display\n  const unitLabels = {\n    squareMeters: 'm²',\n    acres: 'acres',\n    hectares: 'ha',\n    squareFeet: 'ft²',\n    squareKilometers: 'km²',\n    squareMiles: 'mi²',\n    perimeter: 'm'\n  };\n\n  return (\n    <div className=\"app-container\">\n      <header>\n        <h1>Land Measurement App</h1>\n      </header>\n      \n      <div className=\"content\">\n        <div className=\"map-container\">\n          <MapContainer \n            center={[40.505, -100.09]} \n            zoom={13} \n            style={{ height: '600px', width: '100%' }}\n            ref={mapRef}\n          >\n            <TileLayer\n              attribution='&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\n              url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n            />\n            <TileLayer\n              attribution='&copy; <a href=\"https://www.esri.com\">Esri</a>'\n              url=\"https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}\"\n            />\n            <FeatureGroup ref={featureGroupRef}>\n              <EditControl\n                position=\"topright\"\n                onCreated={handleCreate}\n                draw={{\n                  rectangle: false,\n                  circle: false,\n                  circlemarker: false,\n                  marker: false,  // We'll handle markers ourselves\n                  polyline: true,\n                  polygon: true,\n                }}\n              />\n            </FeatureGroup>\n            \n            {/* Display all the markers */}\n            {markers.map(marker => (\n              <Marker \n                key={marker.id} \n                position={marker.position}\n              >\n                <Popup>\n                  <div>\n                    <strong>{marker.label}</strong><br />\n                    Lat: {marker.position[0].toFixed(6)}<br />\n                    Lng: {marker.position[1].toFixed(6)}<br />\n                    <button onClick={() => removeMarker(marker.id)}>Remove</button>\n                  </div>\n                </Popup>\n              </Marker>\n            ))}\n            \n            {/* Mouse position tracker */}\n            <MousePositionTracker onPositionChange={setMousePosition} />\n            \n            {/* Click handler for marker placement and border drawing */}\n            <ClickHandler \n              onMarkerPlace={handleMarkerPlace} \n              isMarkingMode={isMarkingMode}\n              isBorderMode={isBorderMode}\n              featureGroupRef={featureGroupRef}\n            />\n          </MapContainer>\n          \n          <div className=\"mouse-position\">\n            Mouse Position: Lat {mousePosition.lat}, Lng {mousePosition.lng}\n          </div>\n        </div>\n        \n        <div className=\"controls-panel\">\n          <div className=\"measurements\">\n            <h2>Measurements</h2>\n            \n            <div className=\"measurement-units\">\n              <label htmlFor=\"unit-select\">Display unit:</label>\n              <select \n                id=\"unit-select\" \n                value={selectedUnit}\n                onChange={(e) => setSelectedUnit(e.target.value)}\n                className=\"unit-select\"\n              >\n                <option value=\"squareMeters\">Square Meters (m²)</option>\n                <option value=\"acres\">Acres</option>\n                <option value=\"hectares\">Hectares (ha)</option>\n                <option value=\"squareFeet\">Square Feet (ft²)</option>\n                <option value=\"squareKilometers\">Square Kilometers (km²)</option>\n                <option value=\"squareMiles\">Square Miles (mi²)</option>\n              </select>\n            </div>\n            \n            <div className=\"measurements-grid\">\n              <div className=\"measurement-item\">\n                <span className=\"measurement-label\">Area (m²):</span>\n                <span className=\"measurement-value\">{formatMeasurement(measurements.squareMeters)} m²</span>\n              </div>\n              <div className=\"measurement-item\">\n                <span className=\"measurement-label\">Area (acres):</span>\n                <span className=\"measurement-value\">{formatMeasurement(measurements.acres, 'acres')} acres</span>\n              </div>\n              <div className=\"measurement-item\">\n                <span className=\"measurement-label\">Area (ha):</span>\n                <span className=\"measurement-value\">{formatMeasurement(measurements.hectares, 'hectares')} ha</span>\n              </div>\n              <div className=\"measurement-item\">\n                <span className=\"measurement-label\">Area (ft²):</span>\n                <span className=\"measurement-value\">{formatMeasurement(measurements.squareFeet, 'squareFeet')} ft²</span>\n              </div>\n              <div className=\"measurement-item\">\n                <span className=\"measurement-label\">Area (km²):</span>\n                <span className=\"measurement-value\">{formatMeasurement(measurements.squareKilometers, 'squareKilometers')} km²</span>\n              </div>\n              <div className=\"measurement-item\">\n                <span className=\"measurement-label\">Area (mi²):</span>\n                <span className=\"measurement-value\">{formatMeasurement(measurements.squareMiles, 'squareMiles')} mi²</span>\n              </div>\n              <div className=\"measurement-item\">\n                <span className=\"measurement-label\">Perimeter:</span>\n                <span className=\"measurement-value\">{formatMeasurement(measurements.perimeter, 'perimeter')} m</span>\n              </div>\n            </div>\n            \n            {currentPolygon && (\n              <div className=\"current-polygon\">\n                <h3>Current Polygon</h3>\n                <div className=\"polygon-coordinates-container\">\n                  <textarea \n                    className=\"polygon-coordinates\" \n                    readOnly \n                    value={currentPolygon.coordinates\n                      .map(coord => `[${coord[0].toFixed(6)}, ${coord[1].toFixed(6)}]`)\n                      .join(',\\n')}\n                  />\n                  <button onClick={copyPolygonCoordinates} className=\"copy-button\">\n                    Copy\n                  </button>\n                </div>\n              </div>\n            )}\n          </div>\n          \n          <div className=\"actions\">\n            <button \n              onClick={toggleMarkingMode} \n              className={`action-button ${isMarkingMode ? 'active' : ''}`}\n            >\n              {isMarkingMode ? 'Exit Marker Mode' : 'Place Markers'}\n            </button>\n            \n            <button \n              onClick={toggleBorderMode} \n              className={`action-button ${isBorderMode ? 'active' : ''}`}\n            >\n              {isBorderMode ? 'Exit Border Mode' : 'Draw Border'}\n            </button>\n            \n            <button \n              onClick={detectBoundaries} \n              disabled={isProcessing}\n              className=\"action-button\"\n            >\n              {isProcessing ? 'Processing...' : 'Detect Boundaries'}\n            </button>\n            \n            <button \n              onClick={exportData} \n              disabled={polygons.length === 0 && markers.length === 0}\n              className=\"action-button\"\n            >\n              Export Data\n            </button>\n          </div>\n          \n          {errorMessage && (\n            <div className=\"error-message\">\n              {errorMessage}\n            </div>\n          )}\n          \n          <div className=\"data-sections\">\n            <div className=\"markers-section\">\n              <h3>Placed Markers</h3>\n              {markers.length === 0 ? (\n                <p>No markers placed</p>\n              ) : (\n                <ul>\n                  {markers.map(marker => (\n                    <li key={marker.id}>\n                      <strong>{marker.label}:</strong> {marker.position[0].toFixed(6)}, {marker.position[1].toFixed(6)}\n                      <button \n                        onClick={() => removeMarker(marker.id)}\n                        className=\"small-button\"\n                      >\n                        ×\n                      </button>\n                    </li>\n                  ))}\n                </ul>\n              )}\n            </div>\n            \n            <div className=\"polygons-section\">\n              <h3>Saved Measurements</h3>\n              {polygons.length === 0 ? (\n                <p>No measurements saved</p>\n              ) : (\n                <ul>\n                  {polygons.map(polygon => (\n                    <li \n                      key={polygon.id}\n                      className={currentPolygon && currentPolygon.id === polygon.id ? 'selected' : ''}\n                      onClick={() => handlePolygonSelect(polygon)}\n                    >\n                      Area: {formatMeasurement(polygon[selectedUnit], selectedUnit)} {unitLabels[selectedUnit]} | Perimeter: {formatMeasurement(polygon.perimeter, 'perimeter')} m\n                    </li>\n                  ))}\n                </ul>\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;"],"mappings":";;;;AAAA;AACA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,MAAM,EAAEC,SAAS,QAAQ,OAAO;AAC1D,SACEC,YAAY,EACZC,SAAS,EACTC,YAAY,EACZC,MAAM,EACNC,KAAK,EACLC,YAAY,QACP,eAAe;AACtB,SAASC,WAAW,QAAQ,oBAAoB;AAChD,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,CAAC,MAAM,SAAS;AACvB,OAAO,0BAA0B;AACjC,OAAO,oCAAoC;AAC3C,OAAO,WAAW;;AAElB;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,OAAOF,CAAC,CAACG,IAAI,CAACC,OAAO,CAACC,SAAS,CAACC,WAAW;AAC3CN,CAAC,CAACG,IAAI,CAACC,OAAO,CAACG,YAAY,CAAC;EAC1BC,aAAa,EAAE,gFAAgF;EAC/FC,OAAO,EAAE,6EAA6E;EACtFC,SAAS,EAAE;AACb,CAAC,CAAC;;AAEF;AACA,MAAMC,oBAAoB,GAAGA,CAAC;EAAEC;AAAiB,CAAC,KAAK;EAAAC,EAAA;EACrDhB,YAAY,CAAC;IACXiB,SAAS,EAAGC,CAAC,IAAK;MAChB,MAAM;QAAEC,GAAG;QAAEC;MAAI,CAAC,GAAGF,CAAC,CAACG,MAAM;MAC7BN,gBAAgB,CAAC;QACfI,GAAG,EAAEA,GAAG,CAACG,OAAO,CAAC,CAAC,CAAC;QACnBF,GAAG,EAAEA,GAAG,CAACE,OAAO,CAAC,CAAC;MACpB,CAAC,CAAC;IACJ;EACF,CAAC,CAAC;EACF,OAAO,IAAI;AACb,CAAC;;AAED;AAAAN,EAAA,CAbMF,oBAAoB;EAAA,QACxBd,YAAY;AAAA;AAAAuB,EAAA,GADRT,oBAAoB;AAc1B,MAAMU,YAAY,GAAGA,CAAC;EAAEC,aAAa;EAAEC,aAAa;EAAEC,YAAY;EAAEC;AAAgB,CAAC,KAAK;EAAAC,GAAA;EACxF,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGvC,QAAQ,CAAC,EAAE,CAAC;EACpD,MAAMwC,MAAM,GAAGvC,MAAM,CAAC,CAAC;EAEvBO,YAAY,CAAC;IACXiC,KAAK,EAAGf,CAAC,IAAK;MACZ,IAAIQ,aAAa,EAAE;QACjBD,aAAa,CAACP,CAAC,CAACG,MAAM,CAAC;MACzB,CAAC,MAAM,IAAIM,YAAY,EAAE;QACvB,MAAMO,QAAQ,GAAG,CAAChB,CAAC,CAACG,MAAM,CAACF,GAAG,EAAED,CAAC,CAACG,MAAM,CAACD,GAAG,CAAC;QAC7C,MAAMe,aAAa,GAAG,CAAC,GAAGL,YAAY,EAAEI,QAAQ,CAAC;QACjDH,eAAe,CAACI,aAAa,CAAC;;QAE9B;QACA,IAAIC,MAAM,CAACC,QAAQ,IAAIL,MAAM,CAACM,OAAO,IAAIN,MAAM,CAACM,OAAO,CAACC,QAAQ,CAACH,MAAM,CAACC,QAAQ,CAAC,EAAE;UACjFL,MAAM,CAACM,OAAO,CAACE,WAAW,CAACJ,MAAM,CAACC,QAAQ,CAAC;QAC7C;;QAEA;QACAL,MAAM,CAACM,OAAO,GAAGN,MAAM,CAACM,OAAO,IAAIpB,CAAC,CAACuB,MAAM;;QAE3C;QACA,IAAIN,aAAa,CAACO,MAAM,IAAI,CAAC,EAAE;UAC7BN,MAAM,CAACC,QAAQ,GAAGlC,CAAC,CAACwC,QAAQ,CAACR,aAAa,EAAE;YAAES,KAAK,EAAE,KAAK;YAAEC,MAAM,EAAE;UAAE,CAAC,CAAC;UACxET,MAAM,CAACC,QAAQ,CAACS,KAAK,CAACd,MAAM,CAACM,OAAO,CAAC;QACvC;MACF;IACF;EACF,CAAC,CAAC;;EAEF;EACAtC,YAAY,CAAC;IACX+C,QAAQ,EAAG7B,CAAC,IAAK;MACf,IAAIS,YAAY,IAAIG,YAAY,CAACY,MAAM,IAAI,CAAC,EAAE;QAC5C;QACA,IAAIN,MAAM,CAACC,QAAQ,IAAIL,MAAM,CAACM,OAAO,IAAIN,MAAM,CAACM,OAAO,CAACC,QAAQ,CAACH,MAAM,CAACC,QAAQ,CAAC,EAAE;UACjFL,MAAM,CAACM,OAAO,CAACE,WAAW,CAACJ,MAAM,CAACC,QAAQ,CAAC;UAC3CD,MAAM,CAACC,QAAQ,GAAG,IAAI;QACxB;;QAEA;QACA,MAAMW,OAAO,GAAG7C,CAAC,CAAC6C,OAAO,CAAClB,YAAY,EAAE;UAAEc,KAAK,EAAE,MAAM;UAAEC,MAAM,EAAE;QAAE,CAAC,CAAC;;QAErE;QACA,IAAIjB,eAAe,CAACU,OAAO,EAAE;UAC3BV,eAAe,CAACU,OAAO,CAACW,QAAQ,CAACD,OAAO,CAAC;;UAEzC;UACA,MAAME,cAAc,GAAG;YACrBC,SAAS,EAAE,SAAS;YACpBC,KAAK,EAAEJ;UACT,CAAC;;UAED;UACA,MAAMK,WAAW,GAAG,IAAIC,WAAW,CAAC,wBAAwB,EAAE;YAC5DC,MAAM,EAAEL;UACV,CAAC,CAAC;UACFM,QAAQ,CAACC,aAAa,CAACJ,WAAW,CAAC;QACrC;;QAEA;QACAtB,eAAe,CAAC,EAAE,CAAC;MACrB;IACF;EACF,CAAC,CAAC;;EAEF;EACArC,SAAS,CAAC,MAAM;IACd,IAAI,CAACiC,YAAY,IAAIK,MAAM,CAACM,OAAO,IAAIF,MAAM,CAACC,QAAQ,EAAE;MACtDL,MAAM,CAACM,OAAO,CAACE,WAAW,CAACJ,MAAM,CAACC,QAAQ,CAAC;MAC3CD,MAAM,CAACC,QAAQ,GAAG,IAAI;MACtBN,eAAe,CAAC,EAAE,CAAC;IACrB;EACF,CAAC,EAAE,CAACJ,YAAY,CAAC,CAAC;EAElB,OAAO,IAAI;AACb,CAAC;;AAED;AAAAE,GAAA,CA9EML,YAAY;EAAA,QAIhBxB,YAAY,EA2BZA,YAAY;AAAA;AAAA0D,GAAA,GA/BRlC,YAAY;AA+ElB,MAAMmC,gBAAgB,GAAG;EACvBC,YAAY,EAAE;IACZC,KAAK,EAAE,WAAW;IAClBC,QAAQ,EAAE,MAAM;IAChBC,UAAU,EAAE,OAAO;IACnBC,gBAAgB,EAAE,QAAQ;IAC1BC,WAAW,EAAE;EACf;AACF,CAAC;AAED,MAAMC,GAAG,GAAGA,CAAA,KAAM;EAAAC,GAAA;EAChB,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAG7E,QAAQ,CAAC;IAC/CoE,YAAY,EAAE,CAAC;IACfC,KAAK,EAAE,CAAC;IACRC,QAAQ,EAAE,CAAC;IACXC,UAAU,EAAE,CAAC;IACbC,gBAAgB,EAAE,CAAC;IACnBC,WAAW,EAAE,CAAC;IACdK,SAAS,EAAE;EACb,CAAC,CAAC;EACF,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGhF,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACiF,YAAY,EAAEC,eAAe,CAAC,GAAGlF,QAAQ,CAAC,KAAK,CAAC;EACvD,MAAM,CAACmF,YAAY,EAAEC,eAAe,CAAC,GAAGpF,QAAQ,CAAC,EAAE,CAAC;EACpD,MAAM,CAACqF,OAAO,EAAEC,UAAU,CAAC,GAAGtF,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACuF,aAAa,EAAEC,gBAAgB,CAAC,GAAGxF,QAAQ,CAAC;IAAE2B,GAAG,EAAE,UAAU;IAAEC,GAAG,EAAE;EAAW,CAAC,CAAC;EACxF,MAAM,CAAC6D,cAAc,EAAEC,iBAAiB,CAAC,GAAG1F,QAAQ,CAAC,IAAI,CAAC;EAC1D,MAAM,CAACkC,aAAa,EAAEyD,gBAAgB,CAAC,GAAG3F,QAAQ,CAAC,KAAK,CAAC;EACzD,MAAM,CAACmC,YAAY,EAAEyD,eAAe,CAAC,GAAG5F,QAAQ,CAAC,KAAK,CAAC;EACvD,MAAM,CAAC6F,YAAY,EAAEC,eAAe,CAAC,GAAG9F,QAAQ,CAAC,cAAc,CAAC;EAChE,MAAMoC,eAAe,GAAGnC,MAAM,CAAC,CAAC;EAChC,MAAMuC,MAAM,GAAGvC,MAAM,CAAC,CAAC;;EAEvB;EACAC,SAAS,CAAC,MAAM;IACd,MAAM6F,0BAA0B,GAAIrE,CAAC,IAAK;MACxCsE,YAAY,CAACtE,CAAC,CAACqC,MAAM,CAAC;IACxB,CAAC;IAEDC,QAAQ,CAACiC,gBAAgB,CAAC,wBAAwB,EAAEF,0BAA0B,CAAC;IAE/E,OAAO,MAAM;MACX/B,QAAQ,CAACkC,mBAAmB,CAAC,wBAAwB,EAAEH,0BAA0B,CAAC;IACpF,CAAC;EACH,CAAC,EAAE,CAAChB,QAAQ,CAAC,CAAC,CAAC,CAAC;;EAEhB,MAAMiB,YAAY,GAAItE,CAAC,IAAK;IAC1B,MAAM;MAAEiC,SAAS;MAAEC;IAAM,CAAC,GAAGlC,CAAC;IAE9B,IAAIiC,SAAS,KAAK,SAAS,EAAE;MAC3B;MACA,MAAMwC,OAAO,GAAGvC,KAAK,CAACwC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC;MACrC,MAAMC,WAAW,GAAGF,OAAO,CAACG,GAAG,CAACC,MAAM,IAAI,CAACA,MAAM,CAAC5E,GAAG,EAAE4E,MAAM,CAAC3E,GAAG,CAAC,CAAC;;MAEnE;MACA,MAAM4E,kBAAkB,GAAGC,aAAa,CAACJ,WAAW,CAAC;MACrD,MAAMK,iBAAiB,GAAGC,kBAAkB,CAACN,WAAW,CAAC;;MAEzD;MACA,MAAMO,gBAAgB,GAAG;QACvBxC,YAAY,EAAEoC,kBAAkB;QAChCnC,KAAK,EAAEmC,kBAAkB,GAAGrC,gBAAgB,CAACC,YAAY,CAACC,KAAK;QAC/DC,QAAQ,EAAEkC,kBAAkB,GAAGrC,gBAAgB,CAACC,YAAY,CAACE,QAAQ;QACrEC,UAAU,EAAEiC,kBAAkB,GAAGrC,gBAAgB,CAACC,YAAY,CAACG,UAAU;QACzEC,gBAAgB,EAAEgC,kBAAkB,GAAGrC,gBAAgB,CAACC,YAAY,CAACI,gBAAgB;QACrFC,WAAW,EAAE+B,kBAAkB,GAAGrC,gBAAgB,CAACC,YAAY,CAACK,WAAW;QAC3EK,SAAS,EAAE4B;MACb,CAAC;MAED,MAAMG,UAAU,GAAG;QACjBC,EAAE,EAAEC,IAAI,CAACC,GAAG,CAAC,CAAC;QACdX,WAAW;QACX,GAAGO;MACL,CAAC;MAED/B,eAAe,CAAC+B,gBAAgB,CAAC;;MAEjC;MACA5B,WAAW,CAAC,CAAC,GAAGD,QAAQ,EAAE8B,UAAU,CAAC,CAAC;;MAEtC;MACAnB,iBAAiB,CAACmB,UAAU,CAAC;IAC/B;EACF,CAAC;EAED,MAAMJ,aAAa,GAAIJ,WAAW,IAAK;IACrC;IACA;IACA,IAAIY,IAAI,GAAG,CAAC;IACZ,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGb,WAAW,CAACnD,MAAM,EAAEgE,CAAC,EAAE,EAAE;MAC3C,MAAMC,CAAC,GAAG,CAACD,CAAC,GAAG,CAAC,IAAIb,WAAW,CAACnD,MAAM;MACtC+D,IAAI,IAAIZ,WAAW,CAACa,CAAC,CAAC,CAAC,CAAC,CAAC,GAAGb,WAAW,CAACc,CAAC,CAAC,CAAC,CAAC,CAAC;MAC7CF,IAAI,IAAIZ,WAAW,CAACc,CAAC,CAAC,CAAC,CAAC,CAAC,GAAGd,WAAW,CAACa,CAAC,CAAC,CAAC,CAAC,CAAC;IAC/C;IACA,OAAOE,IAAI,CAACC,GAAG,CAACJ,IAAI,CAAC,GAAG,MAAM,GAAG,MAAM,GAAG,CAAC,CAAC,CAAC;EAC/C,CAAC;EAED,MAAMN,kBAAkB,GAAIN,WAAW,IAAK;IAC1C;IACA,IAAIvB,SAAS,GAAG,CAAC;IACjB,KAAK,IAAIoC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGb,WAAW,CAACnD,MAAM,EAAEgE,CAAC,EAAE,EAAE;MAC3C,MAAMC,CAAC,GAAG,CAACD,CAAC,GAAG,CAAC,IAAIb,WAAW,CAACnD,MAAM;MACtC,MAAMoE,EAAE,GAAGjB,WAAW,CAACa,CAAC,CAAC,CAAC,CAAC,CAAC,GAAGb,WAAW,CAACc,CAAC,CAAC,CAAC,CAAC,CAAC;MAChD,MAAMI,EAAE,GAAGlB,WAAW,CAACa,CAAC,CAAC,CAAC,CAAC,CAAC,GAAGb,WAAW,CAACc,CAAC,CAAC,CAAC,CAAC,CAAC;MAChDrC,SAAS,IAAIsC,IAAI,CAACI,IAAI,CAACF,EAAE,GAAGA,EAAE,GAAGC,EAAE,GAAGA,EAAE,CAAC;IAC3C;IACA,OAAOzC,SAAS,GAAG,MAAM,CAAC,CAAC;EAC7B,CAAC;EAED,MAAM2C,iBAAiB,GAAI5F,MAAM,IAAK;IACpC,IAAIK,aAAa,EAAE;MACjB,MAAMwF,SAAS,GAAG;QAChBZ,EAAE,EAAEC,IAAI,CAACC,GAAG,CAAC,CAAC;QACdW,QAAQ,EAAE,CAAC9F,MAAM,CAACF,GAAG,EAAEE,MAAM,CAACD,GAAG,CAAC;QAClCgG,KAAK,EAAE,UAAUvC,OAAO,CAACnC,MAAM,GAAG,CAAC;MACrC,CAAC;MACDoC,UAAU,CAAC,CAAC,GAAGD,OAAO,EAAEqC,SAAS,CAAC,CAAC;IACrC;EACF,CAAC;EAED,MAAMG,iBAAiB,GAAGA,CAAA,KAAM;IAC9BlC,gBAAgB,CAAC,CAACzD,aAAa,CAAC;IAChC,IAAIC,YAAY,EAAEyD,eAAe,CAAC,KAAK,CAAC;EAC1C,CAAC;EAED,MAAMkC,gBAAgB,GAAGA,CAAA,KAAM;IAC7BlC,eAAe,CAAC,CAACzD,YAAY,CAAC;IAC9B,IAAID,aAAa,EAAEyD,gBAAgB,CAAC,KAAK,CAAC;EAC5C,CAAC;EAED,MAAMoC,YAAY,GAAIC,QAAQ,IAAK;IACjC1C,UAAU,CAACD,OAAO,CAAC4C,MAAM,CAACC,MAAM,IAAIA,MAAM,CAACpB,EAAE,KAAKkB,QAAQ,CAAC,CAAC;EAC9D,CAAC;EAED,MAAMG,gBAAgB,GAAG,MAAAA,CAAA,KAAY;IACnCjD,eAAe,CAAC,IAAI,CAAC;IACrBE,eAAe,CAAC,EAAE,CAAC;IAEnB,IAAI;MACF;MACA,MAAMgD,WAAW,GAAG5F,MAAM,CAACM,OAAO;MAClC,MAAMuF,MAAM,GAAGD,WAAW,CAACE,SAAS,CAAC,CAAC;MACtC,MAAMC,MAAM,GAAGH,WAAW,CAACI,SAAS,CAAC,CAAC;MACtC,MAAMC,IAAI,GAAGL,WAAW,CAACM,OAAO,CAAC,CAAC;MAElC,MAAMC,QAAQ,GAAG,MAAMjI,KAAK,CAACkI,IAAI,CAAC,6CAA6C,EAAE;QAC/EP,MAAM,EAAE;UACNQ,KAAK,EAAER,MAAM,CAACS,QAAQ,CAAC,CAAC;UACxBC,KAAK,EAAEV,MAAM,CAACW,QAAQ,CAAC,CAAC;UACxBC,IAAI,EAAEZ,MAAM,CAACa,OAAO,CAAC,CAAC;UACtBC,IAAI,EAAEd,MAAM,CAACe,OAAO,CAAC;QACvB,CAAC;QACDb,MAAM,EAAE;UACN5G,GAAG,EAAE4G,MAAM,CAAC5G,GAAG;UACfC,GAAG,EAAE2G,MAAM,CAAC3G;QACd,CAAC;QACD6G,IAAI,EAAEA;MACR,CAAC,CAAC;;MAEF;MACA,IAAIE,QAAQ,CAACU,IAAI,CAACC,UAAU,IAAIX,QAAQ,CAACU,IAAI,CAACC,UAAU,CAACpG,MAAM,GAAG,CAAC,EAAE;QACnE;QACAd,eAAe,CAACU,OAAO,CAACyG,WAAW,CAAC,CAAC;;QAErC;QACA,MAAMC,gBAAgB,GAAG,EAAE;QAC3Bb,QAAQ,CAACU,IAAI,CAACC,UAAU,CAACG,OAAO,CAACC,QAAQ,IAAI;UAC3C,MAAMrD,WAAW,GAAGqD,QAAQ,CAACrD,WAAW;;UAExC;UACA,MAAM7C,OAAO,GAAG7C,CAAC,CAAC6C,OAAO,CAAC6C,WAAW,CAAC;UACtCjE,eAAe,CAACU,OAAO,CAACW,QAAQ,CAACD,OAAO,CAAC;;UAEzC;UACA,MAAMgD,kBAAkB,GAAGC,aAAa,CAACJ,WAAW,CAAC;UACrD,MAAMK,iBAAiB,GAAGC,kBAAkB,CAACN,WAAW,CAAC;;UAEzD;UACA,MAAMO,gBAAgB,GAAG;YACvBxC,YAAY,EAAEoC,kBAAkB;YAChCnC,KAAK,EAAEmC,kBAAkB,GAAGrC,gBAAgB,CAACC,YAAY,CAACC,KAAK;YAC/DC,QAAQ,EAAEkC,kBAAkB,GAAGrC,gBAAgB,CAACC,YAAY,CAACE,QAAQ;YACrEC,UAAU,EAAEiC,kBAAkB,GAAGrC,gBAAgB,CAACC,YAAY,CAACG,UAAU;YACzEC,gBAAgB,EAAEgC,kBAAkB,GAAGrC,gBAAgB,CAACC,YAAY,CAACI,gBAAgB;YACrFC,WAAW,EAAE+B,kBAAkB,GAAGrC,gBAAgB,CAACC,YAAY,CAACK,WAAW;YAC3EK,SAAS,EAAE4B;UACb,CAAC;UAED,MAAMG,UAAU,GAAG;YACjBC,EAAE,EAAEC,IAAI,CAACC,GAAG,CAAC,CAAC,GAAGI,IAAI,CAACuC,MAAM,CAAC,CAAC;YAC9BtD,WAAW;YACX,GAAGO;UACL,CAAC;UAED4C,gBAAgB,CAACI,IAAI,CAAC/C,UAAU,CAAC;QACnC,CAAC,CAAC;QAEF7B,WAAW,CAAC,CAAC,GAAGD,QAAQ,EAAE,GAAGyE,gBAAgB,CAAC,CAAC;QAE/C,IAAIA,gBAAgB,CAACtG,MAAM,GAAG,CAAC,EAAE;UAC/BwC,iBAAiB,CAAC8D,gBAAgB,CAAC,CAAC,CAAC,CAAC;UACtC3E,eAAe,CAAC;YACdT,YAAY,EAAEoF,gBAAgB,CAAC,CAAC,CAAC,CAACpF,YAAY;YAC9CC,KAAK,EAAEmF,gBAAgB,CAAC,CAAC,CAAC,CAACnF,KAAK;YAChCC,QAAQ,EAAEkF,gBAAgB,CAAC,CAAC,CAAC,CAAClF,QAAQ;YACtCC,UAAU,EAAEiF,gBAAgB,CAAC,CAAC,CAAC,CAACjF,UAAU;YAC1CC,gBAAgB,EAAEgF,gBAAgB,CAAC,CAAC,CAAC,CAAChF,gBAAgB;YACtDC,WAAW,EAAE+E,gBAAgB,CAAC,CAAC,CAAC,CAAC/E,WAAW;YAC5CK,SAAS,EAAE0E,gBAAgB,CAAC,CAAC,CAAC,CAAC1E;UACjC,CAAC,CAAC;QACJ;MACF,CAAC,MAAM;QACLM,eAAe,CAAC,qCAAqC,CAAC;MACxD;IACF,CAAC,CAAC,OAAOyE,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;MACnDzE,eAAe,CAAC,+CAA+C,CAAC;IAClE,CAAC,SAAS;MACRF,eAAe,CAAC,KAAK,CAAC;IACxB;EACF,CAAC;EAED,MAAM6E,UAAU,GAAGA,CAAA,KAAM;IACvB,MAAMA,UAAU,GAAG;MACjBhF,QAAQ;MACRM;IACF,CAAC;IAED,MAAM2E,OAAO,GAAGC,IAAI,CAACC,SAAS,CAACH,UAAU,EAAE,IAAI,EAAE,CAAC,CAAC;IACnD,MAAMI,OAAO,GAAG,sCAAsC,GAAEC,kBAAkB,CAACJ,OAAO,CAAC;IAEnF,MAAMK,qBAAqB,GAAG,wBAAwB;IAEtD,MAAMC,WAAW,GAAGtG,QAAQ,CAACuG,aAAa,CAAC,GAAG,CAAC;IAC/CD,WAAW,CAACE,YAAY,CAAC,MAAM,EAAEL,OAAO,CAAC;IACzCG,WAAW,CAACE,YAAY,CAAC,UAAU,EAAEH,qBAAqB,CAAC;IAC3DC,WAAW,CAAC7H,KAAK,CAAC,CAAC;EACrB,CAAC;EAED,MAAMgI,sBAAsB,GAAGA,CAAA,KAAM;IACnC,IAAIhF,cAAc,EAAE;MAClB;MACA,MAAMiF,eAAe,GAAGjF,cAAc,CAACY,WAAW,CAC/CC,GAAG,CAACqE,KAAK,IAAI,IAAIA,KAAK,CAAC,CAAC,CAAC,CAAC7I,OAAO,CAAC,CAAC,CAAC,KAAK6I,KAAK,CAAC,CAAC,CAAC,CAAC7I,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,CAChE8I,IAAI,CAAC,KAAK,CAAC;MAEdC,SAAS,CAACC,SAAS,CAACC,SAAS,CAAC,MAAML,eAAe,KAAK,CAAC,CACtDM,IAAI,CAAC,MAAM;QACVC,KAAK,CAAC,0CAA0C,CAAC;MACnD,CAAC,CAAC,CACDC,KAAK,CAACC,GAAG,IAAI;QACZrB,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEsB,GAAG,CAAC;QAClD;QACA,MAAMC,QAAQ,GAAGpH,QAAQ,CAACuG,aAAa,CAAC,UAAU,CAAC;QACnDa,QAAQ,CAACC,KAAK,GAAG,MAAMX,eAAe,KAAK;QAC3C1G,QAAQ,CAACsH,IAAI,CAACC,WAAW,CAACH,QAAQ,CAAC;QACnCA,QAAQ,CAACI,MAAM,CAAC,CAAC;QACjBxH,QAAQ,CAACyH,WAAW,CAAC,MAAM,CAAC;QAC5BzH,QAAQ,CAACsH,IAAI,CAACI,WAAW,CAACN,QAAQ,CAAC;QACnCH,KAAK,CAAC,0CAA0C,CAAC;MACnD,CAAC,CAAC;IACN,CAAC,MAAM;MACLA,KAAK,CAAC,8BAA8B,CAAC;IACvC;EACF,CAAC;EAED,MAAMU,mBAAmB,GAAInI,OAAO,IAAK;IACvCkC,iBAAiB,CAAClC,OAAO,CAAC;IAC1BqB,eAAe,CAAC;MACdT,YAAY,EAAEZ,OAAO,CAACY,YAAY;MAClCC,KAAK,EAAEb,OAAO,CAACa,KAAK;MACpBC,QAAQ,EAAEd,OAAO,CAACc,QAAQ;MAC1BC,UAAU,EAAEf,OAAO,CAACe,UAAU;MAC9BC,gBAAgB,EAAEhB,OAAO,CAACgB,gBAAgB;MAC1CC,WAAW,EAAEjB,OAAO,CAACiB,WAAW;MAChCK,SAAS,EAAEtB,OAAO,CAACsB;IACrB,CAAC,CAAC;EACJ,CAAC;;EAED;EACA,MAAM8G,iBAAiB,GAAGA,CAACP,KAAK,EAAEQ,IAAI,KAAK;IACzC,MAAMC,SAAS,GAAG;MAChB1H,YAAY,EAAE,CAAC;MACfC,KAAK,EAAE,CAAC;MACRC,QAAQ,EAAE,CAAC;MACXC,UAAU,EAAE,CAAC;MACbC,gBAAgB,EAAE,CAAC;MACnBC,WAAW,EAAE,CAAC;MACdK,SAAS,EAAE;IACb,CAAC;IAED,OAAOiH,MAAM,CAACV,KAAK,CAAC,CAACvJ,OAAO,CAACgK,SAAS,CAACD,IAAI,CAAC,IAAI,CAAC,CAAC;EACpD,CAAC;;EAED;EACA,MAAMG,UAAU,GAAG;IACjB5H,YAAY,EAAE,IAAI;IAClBC,KAAK,EAAE,OAAO;IACdC,QAAQ,EAAE,IAAI;IACdC,UAAU,EAAE,KAAK;IACjBC,gBAAgB,EAAE,KAAK;IACvBC,WAAW,EAAE,KAAK;IAClBK,SAAS,EAAE;EACb,CAAC;EAED,oBACEjE,OAAA;IAAKoL,SAAS,EAAC,eAAe;IAAAC,QAAA,gBAC5BrL,OAAA;MAAAqL,QAAA,eACErL,OAAA;QAAAqL,QAAA,EAAI;MAAoB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACvB,CAAC,eAETzL,OAAA;MAAKoL,SAAS,EAAC,SAAS;MAAAC,QAAA,gBACtBrL,OAAA;QAAKoL,SAAS,EAAC,eAAe;QAAAC,QAAA,gBAC5BrL,OAAA,CAACV,YAAY;UACXoI,MAAM,EAAE,CAAC,MAAM,EAAE,CAAC,MAAM,CAAE;UAC1BE,IAAI,EAAE,EAAG;UACT8D,KAAK,EAAE;YAAEC,MAAM,EAAE,OAAO;YAAEC,KAAK,EAAE;UAAO,CAAE;UAC1CC,GAAG,EAAElK,MAAO;UAAA0J,QAAA,gBAEZrL,OAAA,CAACT,SAAS;YACRuM,WAAW,EAAC,yFAAyF;YACrGC,GAAG,EAAC;UAAoD;YAAAT,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACzD,CAAC,eACFzL,OAAA,CAACT,SAAS;YACRuM,WAAW,EAAC,gDAAgD;YAC5DC,GAAG,EAAC;UAA+F;YAAAT,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACpG,CAAC,eACFzL,OAAA,CAACR,YAAY;YAACqM,GAAG,EAAEtK,eAAgB;YAAA8J,QAAA,eACjCrL,OAAA,CAACJ,WAAW;cACVkH,QAAQ,EAAC,UAAU;cACnBkF,SAAS,EAAE7G,YAAa;cACxB8G,IAAI,EAAE;gBACJC,SAAS,EAAE,KAAK;gBAChBC,MAAM,EAAE,KAAK;gBACbC,YAAY,EAAE,KAAK;gBACnB/E,MAAM,EAAE,KAAK;gBAAG;gBAChB/E,QAAQ,EAAE,IAAI;gBACdK,OAAO,EAAE;cACX;YAAE;cAAA2I,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACH;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACU,CAAC,EAGdjH,OAAO,CAACiB,GAAG,CAAC4B,MAAM,iBACjBrH,OAAA,CAACP,MAAM;YAELqH,QAAQ,EAAEO,MAAM,CAACP,QAAS;YAAAuE,QAAA,eAE1BrL,OAAA,CAACN,KAAK;cAAA2L,QAAA,eACJrL,OAAA;gBAAAqL,QAAA,gBACErL,OAAA;kBAAAqL,QAAA,EAAShE,MAAM,CAACN;gBAAK;kBAAAuE,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAS,CAAC,eAAAzL,OAAA;kBAAAsL,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAK,CAAC,SAChC,EAACpE,MAAM,CAACP,QAAQ,CAAC,CAAC,CAAC,CAAC7F,OAAO,CAAC,CAAC,CAAC,eAACjB,OAAA;kBAAAsL,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAK,CAAC,SACrC,EAACpE,MAAM,CAACP,QAAQ,CAAC,CAAC,CAAC,CAAC7F,OAAO,CAAC,CAAC,CAAC,eAACjB,OAAA;kBAAAsL,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAK,CAAC,eAC1CzL,OAAA;kBAAQqM,OAAO,EAAEA,CAAA,KAAMnF,YAAY,CAACG,MAAM,CAACpB,EAAE,CAAE;kBAAAoF,QAAA,EAAC;gBAAM;kBAAAC,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAQ,CAAC;cAAA;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAC5D;YAAC;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACD;UAAC,GAVHpE,MAAM,CAACpB,EAAE;YAAAqF,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAWR,CACT,CAAC,eAGFzL,OAAA,CAACS,oBAAoB;YAACC,gBAAgB,EAAEiE;UAAiB;YAAA2G,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC,eAG5DzL,OAAA,CAACmB,YAAY;YACXC,aAAa,EAAEwF,iBAAkB;YACjCvF,aAAa,EAAEA,aAAc;YAC7BC,YAAY,EAAEA,YAAa;YAC3BC,eAAe,EAAEA;UAAgB;YAAA+J,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAClC,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACU,CAAC,eAEfzL,OAAA;UAAKoL,SAAS,EAAC,gBAAgB;UAAAC,QAAA,GAAC,sBACV,EAAC3G,aAAa,CAAC5D,GAAG,EAAC,QAAM,EAAC4D,aAAa,CAAC3D,GAAG;QAAA;UAAAuK,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC5D,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH,CAAC,eAENzL,OAAA;QAAKoL,SAAS,EAAC,gBAAgB;QAAAC,QAAA,gBAC7BrL,OAAA;UAAKoL,SAAS,EAAC,cAAc;UAAAC,QAAA,gBAC3BrL,OAAA;YAAAqL,QAAA,EAAI;UAAY;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eAErBzL,OAAA;YAAKoL,SAAS,EAAC,mBAAmB;YAAAC,QAAA,gBAChCrL,OAAA;cAAOsM,OAAO,EAAC,aAAa;cAAAjB,QAAA,EAAC;YAAa;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAO,CAAC,eAClDzL,OAAA;cACEiG,EAAE,EAAC,aAAa;cAChBuE,KAAK,EAAExF,YAAa;cACpBuH,QAAQ,EAAG1L,CAAC,IAAKoE,eAAe,CAACpE,CAAC,CAACuB,MAAM,CAACoI,KAAK,CAAE;cACjDY,SAAS,EAAC,aAAa;cAAAC,QAAA,gBAEvBrL,OAAA;gBAAQwK,KAAK,EAAC,cAAc;gBAAAa,QAAA,EAAC;cAAkB;gBAAAC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAQ,CAAC,eACxDzL,OAAA;gBAAQwK,KAAK,EAAC,OAAO;gBAAAa,QAAA,EAAC;cAAK;gBAAAC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAQ,CAAC,eACpCzL,OAAA;gBAAQwK,KAAK,EAAC,UAAU;gBAAAa,QAAA,EAAC;cAAa;gBAAAC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAQ,CAAC,eAC/CzL,OAAA;gBAAQwK,KAAK,EAAC,YAAY;gBAAAa,QAAA,EAAC;cAAiB;gBAAAC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAQ,CAAC,eACrDzL,OAAA;gBAAQwK,KAAK,EAAC,kBAAkB;gBAAAa,QAAA,EAAC;cAAuB;gBAAAC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAQ,CAAC,eACjEzL,OAAA;gBAAQwK,KAAK,EAAC,aAAa;gBAAAa,QAAA,EAAC;cAAkB;gBAAAC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAQ,CAAC;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACjD,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACN,CAAC,eAENzL,OAAA;YAAKoL,SAAS,EAAC,mBAAmB;YAAAC,QAAA,gBAChCrL,OAAA;cAAKoL,SAAS,EAAC,kBAAkB;cAAAC,QAAA,gBAC/BrL,OAAA;gBAAMoL,SAAS,EAAC,mBAAmB;gBAAAC,QAAA,EAAC;cAAU;gBAAAC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAM,CAAC,eACrDzL,OAAA;gBAAMoL,SAAS,EAAC,mBAAmB;gBAAAC,QAAA,GAAEN,iBAAiB,CAAChH,YAAY,CAACR,YAAY,CAAC,EAAC,QAAG;cAAA;gBAAA+H,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAM,CAAC;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACzF,CAAC,eACNzL,OAAA;cAAKoL,SAAS,EAAC,kBAAkB;cAAAC,QAAA,gBAC/BrL,OAAA;gBAAMoL,SAAS,EAAC,mBAAmB;gBAAAC,QAAA,EAAC;cAAa;gBAAAC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAM,CAAC,eACxDzL,OAAA;gBAAMoL,SAAS,EAAC,mBAAmB;gBAAAC,QAAA,GAAEN,iBAAiB,CAAChH,YAAY,CAACP,KAAK,EAAE,OAAO,CAAC,EAAC,QAAM;cAAA;gBAAA8H,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAM,CAAC;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAC9F,CAAC,eACNzL,OAAA;cAAKoL,SAAS,EAAC,kBAAkB;cAAAC,QAAA,gBAC/BrL,OAAA;gBAAMoL,SAAS,EAAC,mBAAmB;gBAAAC,QAAA,EAAC;cAAU;gBAAAC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAM,CAAC,eACrDzL,OAAA;gBAAMoL,SAAS,EAAC,mBAAmB;gBAAAC,QAAA,GAAEN,iBAAiB,CAAChH,YAAY,CAACN,QAAQ,EAAE,UAAU,CAAC,EAAC,KAAG;cAAA;gBAAA6H,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAM,CAAC;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACjG,CAAC,eACNzL,OAAA;cAAKoL,SAAS,EAAC,kBAAkB;cAAAC,QAAA,gBAC/BrL,OAAA;gBAAMoL,SAAS,EAAC,mBAAmB;gBAAAC,QAAA,EAAC;cAAW;gBAAAC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAM,CAAC,eACtDzL,OAAA;gBAAMoL,SAAS,EAAC,mBAAmB;gBAAAC,QAAA,GAAEN,iBAAiB,CAAChH,YAAY,CAACL,UAAU,EAAE,YAAY,CAAC,EAAC,SAAI;cAAA;gBAAA4H,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAM,CAAC;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACtG,CAAC,eACNzL,OAAA;cAAKoL,SAAS,EAAC,kBAAkB;cAAAC,QAAA,gBAC/BrL,OAAA;gBAAMoL,SAAS,EAAC,mBAAmB;gBAAAC,QAAA,EAAC;cAAW;gBAAAC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAM,CAAC,eACtDzL,OAAA;gBAAMoL,SAAS,EAAC,mBAAmB;gBAAAC,QAAA,GAAEN,iBAAiB,CAAChH,YAAY,CAACJ,gBAAgB,EAAE,kBAAkB,CAAC,EAAC,SAAI;cAAA;gBAAA2H,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAM,CAAC;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAClH,CAAC,eACNzL,OAAA;cAAKoL,SAAS,EAAC,kBAAkB;cAAAC,QAAA,gBAC/BrL,OAAA;gBAAMoL,SAAS,EAAC,mBAAmB;gBAAAC,QAAA,EAAC;cAAW;gBAAAC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAM,CAAC,eACtDzL,OAAA;gBAAMoL,SAAS,EAAC,mBAAmB;gBAAAC,QAAA,GAAEN,iBAAiB,CAAChH,YAAY,CAACH,WAAW,EAAE,aAAa,CAAC,EAAC,SAAI;cAAA;gBAAA0H,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAM,CAAC;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACxG,CAAC,eACNzL,OAAA;cAAKoL,SAAS,EAAC,kBAAkB;cAAAC,QAAA,gBAC/BrL,OAAA;gBAAMoL,SAAS,EAAC,mBAAmB;gBAAAC,QAAA,EAAC;cAAU;gBAAAC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAM,CAAC,eACrDzL,OAAA;gBAAMoL,SAAS,EAAC,mBAAmB;gBAAAC,QAAA,GAAEN,iBAAiB,CAAChH,YAAY,CAACE,SAAS,EAAE,WAAW,CAAC,EAAC,IAAE;cAAA;gBAAAqH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAM,CAAC;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAClG,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACH,CAAC,EAEL7G,cAAc,iBACb5E,OAAA;YAAKoL,SAAS,EAAC,iBAAiB;YAAAC,QAAA,gBAC9BrL,OAAA;cAAAqL,QAAA,EAAI;YAAe;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAI,CAAC,eACxBzL,OAAA;cAAKoL,SAAS,EAAC,+BAA+B;cAAAC,QAAA,gBAC5CrL,OAAA;gBACEoL,SAAS,EAAC,qBAAqB;gBAC/BoB,QAAQ;gBACRhC,KAAK,EAAE5F,cAAc,CAACY,WAAW,CAC9BC,GAAG,CAACqE,KAAK,IAAI,IAAIA,KAAK,CAAC,CAAC,CAAC,CAAC7I,OAAO,CAAC,CAAC,CAAC,KAAK6I,KAAK,CAAC,CAAC,CAAC,CAAC7I,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,CAChE8I,IAAI,CAAC,KAAK;cAAE;gBAAAuB,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAChB,CAAC,eACFzL,OAAA;gBAAQqM,OAAO,EAAEzC,sBAAuB;gBAACwB,SAAS,EAAC,aAAa;gBAAAC,QAAA,EAAC;cAEjE;gBAAAC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAQ,CAAC;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACN,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACH,CACN;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACE,CAAC,eAENzL,OAAA;UAAKoL,SAAS,EAAC,SAAS;UAAAC,QAAA,gBACtBrL,OAAA;YACEqM,OAAO,EAAErF,iBAAkB;YAC3BoE,SAAS,EAAE,iBAAiB/J,aAAa,GAAG,QAAQ,GAAG,EAAE,EAAG;YAAAgK,QAAA,EAE3DhK,aAAa,GAAG,kBAAkB,GAAG;UAAe;YAAAiK,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAC/C,CAAC,eAETzL,OAAA;YACEqM,OAAO,EAAEpF,gBAAiB;YAC1BmE,SAAS,EAAE,iBAAiB9J,YAAY,GAAG,QAAQ,GAAG,EAAE,EAAG;YAAA+J,QAAA,EAE1D/J,YAAY,GAAG,kBAAkB,GAAG;UAAa;YAAAgK,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAC5C,CAAC,eAETzL,OAAA;YACEqM,OAAO,EAAE/E,gBAAiB;YAC1BmF,QAAQ,EAAErI,YAAa;YACvBgH,SAAS,EAAC,eAAe;YAAAC,QAAA,EAExBjH,YAAY,GAAG,eAAe,GAAG;UAAmB;YAAAkH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAC/C,CAAC,eAETzL,OAAA;YACEqM,OAAO,EAAEnD,UAAW;YACpBuD,QAAQ,EAAEvI,QAAQ,CAAC7B,MAAM,KAAK,CAAC,IAAImC,OAAO,CAACnC,MAAM,KAAK,CAAE;YACxD+I,SAAS,EAAC,eAAe;YAAAC,QAAA,EAC1B;UAED;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACN,CAAC,EAELnH,YAAY,iBACXtE,OAAA;UAAKoL,SAAS,EAAC,eAAe;UAAAC,QAAA,EAC3B/G;QAAY;UAAAgH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACV,CACN,eAEDzL,OAAA;UAAKoL,SAAS,EAAC,eAAe;UAAAC,QAAA,gBAC5BrL,OAAA;YAAKoL,SAAS,EAAC,iBAAiB;YAAAC,QAAA,gBAC9BrL,OAAA;cAAAqL,QAAA,EAAI;YAAc;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAI,CAAC,EACtBjH,OAAO,CAACnC,MAAM,KAAK,CAAC,gBACnBrC,OAAA;cAAAqL,QAAA,EAAG;YAAiB;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAG,CAAC,gBAExBzL,OAAA;cAAAqL,QAAA,EACG7G,OAAO,CAACiB,GAAG,CAAC4B,MAAM,iBACjBrH,OAAA;gBAAAqL,QAAA,gBACErL,OAAA;kBAAAqL,QAAA,GAAShE,MAAM,CAACN,KAAK,EAAC,GAAC;gBAAA;kBAAAuE,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAQ,CAAC,KAAC,EAACpE,MAAM,CAACP,QAAQ,CAAC,CAAC,CAAC,CAAC7F,OAAO,CAAC,CAAC,CAAC,EAAC,IAAE,EAACoG,MAAM,CAACP,QAAQ,CAAC,CAAC,CAAC,CAAC7F,OAAO,CAAC,CAAC,CAAC,eAChGjB,OAAA;kBACEqM,OAAO,EAAEA,CAAA,KAAMnF,YAAY,CAACG,MAAM,CAACpB,EAAE,CAAE;kBACvCmF,SAAS,EAAC,cAAc;kBAAAC,QAAA,EACzB;gBAED;kBAAAC,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAQ,CAAC;cAAA,GAPFpE,MAAM,CAACpB,EAAE;gBAAAqF,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAQd,CACL;YAAC;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACA,CACL;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACE,CAAC,eAENzL,OAAA;YAAKoL,SAAS,EAAC,kBAAkB;YAAAC,QAAA,gBAC/BrL,OAAA;cAAAqL,QAAA,EAAI;YAAkB;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAI,CAAC,EAC1BvH,QAAQ,CAAC7B,MAAM,KAAK,CAAC,gBACpBrC,OAAA;cAAAqL,QAAA,EAAG;YAAqB;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAG,CAAC,gBAE5BzL,OAAA;cAAAqL,QAAA,EACGnH,QAAQ,CAACuB,GAAG,CAAC9C,OAAO,iBACnB3C,OAAA;gBAEEoL,SAAS,EAAExG,cAAc,IAAIA,cAAc,CAACqB,EAAE,KAAKtD,OAAO,CAACsD,EAAE,GAAG,UAAU,GAAG,EAAG;gBAChFoG,OAAO,EAAEA,CAAA,KAAMvB,mBAAmB,CAACnI,OAAO,CAAE;gBAAA0I,QAAA,GAC7C,QACO,EAACN,iBAAiB,CAACpI,OAAO,CAACqC,YAAY,CAAC,EAAEA,YAAY,CAAC,EAAC,GAAC,EAACmG,UAAU,CAACnG,YAAY,CAAC,EAAC,gBAAc,EAAC+F,iBAAiB,CAACpI,OAAO,CAACsB,SAAS,EAAE,WAAW,CAAC,EAAC,IAC5J;cAAA,GALOtB,OAAO,CAACsD,EAAE;gBAAAqF,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAKb,CACL;YAAC;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACA,CACL;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACE,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACH,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAAC3H,GAAA,CAvgBID,GAAG;AAAA6I,GAAA,GAAH7I,GAAG;AAygBT,eAAeA,GAAG;AAAC,IAAA3C,EAAA,EAAAmC,GAAA,EAAAqJ,GAAA;AAAAC,YAAA,CAAAzL,EAAA;AAAAyL,YAAA,CAAAtJ,GAAA;AAAAsJ,YAAA,CAAAD,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}